
Capteurs_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d8c  08005d8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d94  08005d94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08005e0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005e0c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f002  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240d  00000000  00000000  0002f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  000320b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023308  00000000  00000000  00032bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010acd  00000000  00000000  00055ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cec39  00000000  00000000  000669a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001355de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e4  00000000  00000000  00135630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a88 	.word	0x08005a88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005a88 	.word	0x08005a88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80005ba:	23d0      	movs	r3, #208	; 0xd0
 80005bc:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80005be:	23ee      	movs	r3, #238	; 0xee
 80005c0:	b299      	uxth	r1, r3
 80005c2:	1d3a      	adds	r2, r7, #4
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4819      	ldr	r0, [pc, #100]	; (8000634 <BMP280_check+0x80>)
 80005ce:	f001 fd7b 	bl	80020c8 <HAL_I2C_Master_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <BMP280_check+0x84>)
 80005de:	f004 fbb5 	bl	8004d4c <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80005e2:	23ee      	movs	r3, #238	; 0xee
 80005e4:	b299      	uxth	r1, r3
 80005e6:	2301      	movs	r3, #1
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	1d3a      	adds	r2, r7, #4
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	9000      	str	r0, [sp, #0]
 80005f2:	4810      	ldr	r0, [pc, #64]	; (8000634 <BMP280_check+0x80>)
 80005f4:	f001 fe66 	bl	80022c4 <HAL_I2C_Master_Receive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <BMP280_check+0x54>
		printf("Problem with check (I2C Receive) \r\n");
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <BMP280_check+0x88>)
 8000604:	f004 fba2 	bl	8004d4c <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8000608:	793b      	ldrb	r3, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <BMP280_check+0x8c>)
 800060e:	f004 fb17 	bl	8004c40 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000612:	793b      	ldrb	r3, [r7, #4]
 8000614:	2258      	movs	r2, #88	; 0x58
 8000616:	4293      	cmp	r3, r2
 8000618:	d104      	bne.n	8000624 <BMP280_check+0x70>
		printf("Ok\r\n");
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <BMP280_check+0x90>)
 800061c:	f004 fb96 	bl	8004d4c <puts>
		return 0;
 8000620:	2300      	movs	r3, #0
 8000622:	e003      	b.n	800062c <BMP280_check+0x78>
	} else {
		printf("not Ok!\r\n");
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <BMP280_check+0x94>)
 8000626:	f004 fb91 	bl	8004d4c <puts>
		return 1;
 800062a:	2301      	movs	r3, #1
	}
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000b4 	.word	0x200000b4
 8000638:	08005aa0 	.word	0x08005aa0
 800063c:	08005ac4 	.word	0x08005ac4
 8000640:	08005ae8 	.word	0x08005ae8
 8000644:	08005af4 	.word	0x08005af4
 8000648:	08005af8 	.word	0x08005af8

0800064c <BMP280_init>:

int BMP280_init() {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000652:	2357      	movs	r3, #87	; 0x57
 8000654:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <BMP280_init+0x40>)
 8000658:	f004 fb78 	bl	8004d4c <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 800065c:	22f4      	movs	r2, #244	; 0xf4
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4619      	mov	r1, r3
 8000662:	4610      	mov	r0, r2
 8000664:	f000 f818 	bl	8000698 <BMP280_Write_Reg>
 8000668:	4603      	mov	r3, r0
 800066a:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d104      	bne.n	800067c <BMP280_init+0x30>
		printf("Config Ok\r\n");
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <BMP280_init+0x44>)
 8000674:	f004 fb6a 	bl	8004d4c <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	//BMP280_get_trimming();
	return 0;
 8000678:	2300      	movs	r3, #0
 800067a:	e003      	b.n	8000684 <BMP280_init+0x38>
		printf("Config not Ok!\r\n");
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <BMP280_init+0x48>)
 800067e:	f004 fb65 	bl	8004d4c <puts>
		return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08005b04 	.word	0x08005b04
 8000690:	08005b14 	.word	0x08005b14
 8000694:	08005b20 	.word	0x08005b20

08000698 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80006b0:	23ee      	movs	r3, #238	; 0xee
 80006b2:	b299      	uxth	r1, r3
 80006b4:	f107 020c 	add.w	r2, r7, #12
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2302      	movs	r3, #2
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <BMP280_Write_Reg+0x7c>)
 80006c2:	f001 fd01 	bl	80020c8 <HAL_I2C_Master_Transmit>
 80006c6:	4603      	mov	r3, r0
 80006c8:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <BMP280_Write_Reg+0x80>)
 80006d2:	f004 fb3b 	bl	8004d4c <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80006d6:	23ee      	movs	r3, #238	; 0xee
 80006d8:	b299      	uxth	r1, r3
 80006da:	f107 020c 	add.w	r2, r7, #12
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <BMP280_Write_Reg+0x7c>)
 80006e8:	f001 fdec 	bl	80022c4 <HAL_I2C_Master_Receive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <BMP280_Write_Reg+0x84>)
 80006f8:	f004 fb28 	bl	8004d4c <puts>
	}

	if (buf[0] == value) {
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	429a      	cmp	r2, r3
 8000702:	d101      	bne.n	8000708 <BMP280_Write_Reg+0x70>
		return 0;
 8000704:	2300      	movs	r3, #0
 8000706:	e000      	b.n	800070a <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8000708:	2301      	movs	r3, #1
	}
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000b4 	.word	0x200000b4
 8000718:	08005b30 	.word	0x08005b30
 800071c:	08005b4c 	.word	0x08005b4c

08000720 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000730:	23ee      	movs	r3, #238	; 0xee
 8000732:	b299      	uxth	r1, r3
 8000734:	1dfa      	adds	r2, r7, #7
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	4814      	ldr	r0, [pc, #80]	; (8000790 <BMP280_Read_Reg+0x70>)
 8000740:	f001 fcc2 	bl	80020c8 <HAL_I2C_Master_Transmit>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <BMP280_Read_Reg+0x74>)
 8000750:	f004 fafc 	bl	8004d4c <puts>
	}

	buf = (uint8_t*) malloc(length);
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	4618      	mov	r0, r3
 8000758:	f004 f97a 	bl	8004a50 <malloc>
 800075c:	4603      	mov	r3, r0
 800075e:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000760:	23ee      	movs	r3, #238	; 0xee
 8000762:	b299      	uxth	r1, r3
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	b29b      	uxth	r3, r3
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	9200      	str	r2, [sp, #0]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <BMP280_Read_Reg+0x70>)
 8000772:	f001 fda7 	bl	80022c4 <HAL_I2C_Master_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <BMP280_Read_Reg+0x78>)
 8000782:	f004 fae3 	bl	8004d4c <puts>
	}

	return buf;
 8000786:	68bb      	ldr	r3, [r7, #8]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000b4 	.word	0x200000b4
 8000794:	08005b30 	.word	0x08005b30
 8000798:	08005b4c 	.word	0x08005b4c

0800079c <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 80007a2:	23fa      	movs	r3, #250	; 0xfa
 80007a4:	2203      	movs	r2, #3
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffb9 	bl	8000720 <BMP280_Read_Reg>
 80007ae:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	031a      	lsls	r2, r3, #12
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3301      	adds	r3, #1
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	3202      	adds	r2, #2
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	0912      	lsrs	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80007ca:	4313      	orrs	r3, r2
 80007cc:	603b      	str	r3, [r7, #0]

	free(buf);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f004 f946 	bl	8004a60 <free>

	printf("Temperature: ");
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <BMP280_get_temperature+0x58>)
 80007d6:	f004 fa33 	bl	8004c40 <iprintf>
	printf("0X%05lX", adc_T);
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <BMP280_get_temperature+0x5c>)
 80007de:	f004 fa2f 	bl	8004c40 <iprintf>
	printf("\r\n");
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <BMP280_get_temperature+0x60>)
 80007e4:	f004 fab2 	bl	8004d4c <puts>

	return adc_T;
 80007e8:	683b      	ldr	r3, [r7, #0]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	08005b68 	.word	0x08005b68
 80007f8:	08005b78 	.word	0x08005b78
 80007fc:	08005b80 	.word	0x08005b80

08000800 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8000806:	23f7      	movs	r3, #247	; 0xf7
 8000808:	2203      	movs	r2, #3
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff87 	bl	8000720 <BMP280_Read_Reg>
 8000812:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	031a      	lsls	r2, r3, #12
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3301      	adds	r3, #1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	3202      	adds	r2, #2
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	0912      	lsrs	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800082e:	4313      	orrs	r3, r2
 8000830:	603b      	str	r3, [r7, #0]

	free(buf);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f004 f914 	bl	8004a60 <free>

	printf("Pressure:    0x");
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <BMP280_get_pressure+0x58>)
 800083a:	f004 fa01 	bl	8004c40 <iprintf>
	printf("%05lX", adc_P);
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <BMP280_get_pressure+0x5c>)
 8000842:	f004 f9fd 	bl	8004c40 <iprintf>
	printf("\r\n");
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <BMP280_get_pressure+0x60>)
 8000848:	f004 fa80 	bl	8004d4c <puts>

	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	08005b84 	.word	0x08005b84
 800085c:	08005b94 	.word	0x08005b94
 8000860:	08005b80 	.word	0x08005b80

08000864 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_CAN1_Init+0x64>)
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MX_CAN1_Init+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_CAN1_Init+0x64>)
 8000870:	2210      	movs	r2, #16
 8000872:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_CAN1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_CAN1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_CAN1_Init+0x64>)
 8000882:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000886:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_CAN1_Init+0x64>)
 800088a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800088e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_CAN1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_CAN1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_CAN1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_CAN1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_CAN1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_CAN1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_CAN1_Init+0x64>)
 80008b6:	f000 fe15 	bl	80014e4 <HAL_CAN_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008c0:	f000 fb50 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	40006400 	.word	0x40006400

080008d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	; (8000954 <HAL_CAN_MspInit+0x84>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d12c      	bne.n	800094c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_CAN_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <HAL_CAN_MspInit+0x88>)
 80008fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_CAN_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_CAN_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_CAN_MspInit+0x88>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_CAN_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800093c:	2309      	movs	r3, #9
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <HAL_CAN_MspInit+0x8c>)
 8000948:	f001 f8cc 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40006400 	.word	0x40006400
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400

08000960 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a2c      	ldr	r2, [pc, #176]	; (8000a30 <MX_GPIO_Init+0xd0>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <MX_GPIO_Init+0xd0>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_GPIO_Init+0xd0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <MX_GPIO_Init+0xd0>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_GPIO_Init+0xd0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <MX_GPIO_Init+0xd0>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2120      	movs	r1, #32
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009ec:	f001 fa0e 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_GPIO_Init+0xd8>)
 8000a08:	f001 f86c 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000a24:	f001 f85e 	bl	8001ae4 <HAL_GPIO_Init>

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020800 	.word	0x40020800

08000a3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <MX_I2C1_Init+0x54>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x58>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a7a:	f001 f9e1 	bl	8001e40 <HAL_I2C_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f000 fa6e 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200000b4 	.word	0x200000b4
 8000a90:	40005400 	.word	0x40005400
 8000a94:	000186a0 	.word	0x000186a0

08000a98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12b      	bne.n	8000b12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad6:	23c0      	movs	r3, #192	; 0xc0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af2:	f000 fff7 	bl	8001ae4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <__io_putchar>:
//	HAL_UART_Transmit(&huart2, (uint8_t *)&ch1, 1, 0xFFFF);
//	HAL_UART_Receive(&huart3, (uint8_t *)&ch2, 1, 0xFFFF);
//	return ch2;
//}
int __io_putchar(int ch)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b30:	1d39      	adds	r1, r7, #4
 8000b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <__io_putchar+0x20>)
 8000b3a:	f003 fbea 	bl	8004312 <HAL_UART_Transmit>
	return ch;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000010c 	.word	0x2000010c

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09e      	sub	sp, #120	; 0x78
 8000b50:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
CAN_TxHeaderTypeDef pHeader_can1_moteur;

pHeader_can1_moteur.StdId = 0x61;
 8000b52:	2361      	movs	r3, #97	; 0x61
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
pHeader_can1_moteur.ExtId = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
pHeader_can1_moteur.IDE = CAN_ID_STD;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
pHeader_can1_moteur.RTR = CAN_RTR_DATA;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	643b      	str	r3, [r7, #64]	; 0x40
pHeader_can1_moteur.DLC = 2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	647b      	str	r3, [r7, #68]	; 0x44
pHeader_can1_moteur.TransmitGlobalTime = DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

uint32_t ptxmailbox;
uint8_t rotpos[2] = {0x5A,0x00};
 8000b6c:	235a      	movs	r3, #90	; 0x5a
 8000b6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
uint8_t rotneg[2] = {0x5A,0x01};
 8000b70:	f44f 73ad 	mov.w	r3, #346	; 0x15a
 8000b74:	853b      	strh	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fc1f 	bl	80013b8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f987 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f7ff feef 	bl	8000960 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b82:	f000 fafd 	bl	8001180 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b86:	f000 fb25 	bl	80011d4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000b8a:	f7ff fe6b 	bl	8000864 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000b8e:	f7ff ff55 	bl	8000a3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 8000b92:	48ad      	ldr	r0, [pc, #692]	; (8000e48 <main+0x2fc>)
 8000b94:	f001 f954 	bl	8001e40 <HAL_I2C_Init>
  uint8_t pData = 0b01010111; 				//!< "010" temp x2 sample "101" pres x16 sample "11" normal mode
 8000b98:	2357      	movs	r3, #87	; 0x57
 8000b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t Ident = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t cal_data[24] = {0};
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  uint16_t cal_data_test = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  uint8_t adata1 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	72fb      	strb	r3, [r7, #11]
  uint8_t adata2 = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	72bb      	strb	r3, [r7, #10]
  uint8_t adata3 = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	727b      	strb	r3, [r7, #9]
  uint16_t dig_T1 = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	80fb      	strh	r3, [r7, #6]
  signed short dig_T2 = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	80bb      	strh	r3, [r7, #4]
  signed short dig_T3 = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	807b      	strh	r3, [r7, #2]
  BMP280_S32_t t_fine;


  // Calibration read & write

  if(HAL_OK != HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, ID, 1, &Ident, sizeof(Ident), timeout)){
 8000bd6:	2332      	movs	r3, #50	; 0x32
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2301      	movs	r3, #1
 8000be6:	22d0      	movs	r2, #208	; 0xd0
 8000be8:	21ee      	movs	r1, #238	; 0xee
 8000bea:	4897      	ldr	r0, [pc, #604]	; (8000e48 <main+0x2fc>)
 8000bec:	f001 fe8a 	bl	8002904 <HAL_I2C_Mem_Read>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <main+0xb2>
  	  printf("Error_ID\r\n");
 8000bf6:	4895      	ldr	r0, [pc, #596]	; (8000e4c <main+0x300>)
 8000bf8:	f004 f8a8 	bl	8004d4c <puts>
 8000bfc:	e005      	b.n	8000c0a <main+0xbe>
    }
  else{
	  printf("ID: %d\r\n",Ident);
 8000bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c02:	4619      	mov	r1, r3
 8000c04:	4892      	ldr	r0, [pc, #584]	; (8000e50 <main+0x304>)
 8000c06:	f004 f81b 	bl	8004c40 <iprintf>
  }
  HAL_Delay(500);
 8000c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c0e:	f000 fc45 	bl	800149c <HAL_Delay>
  if(HAL_OK != HAL_I2C_Mem_Write(&hi2c1, Slave_Add_BMP280 << 1, ctrl_meas, 1, &pData, sizeof(pData), timeout)){
 8000c12:	2332      	movs	r3, #50	; 0x32
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	2301      	movs	r3, #1
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	22f4      	movs	r2, #244	; 0xf4
 8000c24:	21ee      	movs	r1, #238	; 0xee
 8000c26:	4888      	ldr	r0, [pc, #544]	; (8000e48 <main+0x2fc>)
 8000c28:	f001 fd72 	bl	8002710 <HAL_I2C_Mem_Write>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <main+0xee>
	  printf("Error_ctrl_meas\r\n");
 8000c32:	4888      	ldr	r0, [pc, #544]	; (8000e54 <main+0x308>)
 8000c34:	f004 f88a 	bl	8004d4c <puts>
 8000c38:	e002      	b.n	8000c40 <main+0xf4>
  }
  else {
	  printf("All good, ctrl_meas param are set \r\n");
 8000c3a:	4887      	ldr	r0, [pc, #540]	; (8000e58 <main+0x30c>)
 8000c3c:	f004 f886 	bl	8004d4c <puts>
  }

  HAL_Delay(500);
 8000c40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c44:	f000 fc2a 	bl	800149c <HAL_Delay>
  if(HAL_OK != HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, calib_data, 1, &cal_data, sizeof(cal_data), timeout)){
 8000c48:	2332      	movs	r3, #50	; 0x32
 8000c4a:	9302      	str	r3, [sp, #8]
 8000c4c:	2318      	movs	r3, #24
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2301      	movs	r3, #1
 8000c58:	2288      	movs	r2, #136	; 0x88
 8000c5a:	21ee      	movs	r1, #238	; 0xee
 8000c5c:	487a      	ldr	r0, [pc, #488]	; (8000e48 <main+0x2fc>)
 8000c5e:	f001 fe51 	bl	8002904 <HAL_I2C_Mem_Read>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d007      	beq.n	8000c78 <main+0x12c>
   	  printf("Error Calibration transmission\r\n");
 8000c68:	487c      	ldr	r0, [pc, #496]	; (8000e5c <main+0x310>)
 8000c6a:	f004 f86f 	bl	8004d4c <puts>
   	  HAL_Delay(2000);
 8000c6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c72:	f000 fc13 	bl	800149c <HAL_Delay>
 8000c76:	e002      	b.n	8000c7e <main+0x132>
     }
  else {
	  printf("All good, nothing to notice about calibration\r\n");
 8000c78:	4879      	ldr	r0, [pc, #484]	; (8000e60 <main+0x314>)
 8000c7a:	f004 f867 	bl	8004d4c <puts>
  }

  HAL_Delay(500);
 8000c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c82:	f000 fc0b 	bl	800149c <HAL_Delay>
  HAL_CAN_Init(&hcan1);
 8000c86:	4877      	ldr	r0, [pc, #476]	; (8000e64 <main+0x318>)
 8000c88:	f000 fc2c 	bl	80014e4 <HAL_CAN_Init>
  HAL_CAN_Start(&hcan1);
 8000c8c:	4875      	ldr	r0, [pc, #468]	; (8000e64 <main+0x318>)
 8000c8e:	f000 fd24 	bl	80016da <HAL_CAN_Start>

//******************************* Usage des codes fournis*****************************************************
  printf("\r\nChecking for BMP280\r\n");
 8000c92:	4875      	ldr	r0, [pc, #468]	; (8000e68 <main+0x31c>)
 8000c94:	f004 f85a 	bl	8004d4c <puts>
  BMP280_check();
 8000c98:	f7ff fc8c 	bl	80005b4 <BMP280_check>
  printf("\r\nConfigure BMP280\r\n");
 8000c9c:	4873      	ldr	r0, [pc, #460]	; (8000e6c <main+0x320>)
 8000c9e:	f004 f855 	bl	8004d4c <puts>
  BMP280_init();
 8000ca2:	f7ff fcd3 	bl	800064c <BMP280_init>
  HAL_Delay(500);
 8000ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000caa:	f000 fbf7 	bl	800149c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //******************************* Notre code*****************************************************************
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, temp_msb, 1, &adata1, 1, timeout);
 8000cae:	2332      	movs	r3, #50	; 0x32
 8000cb0:	9302      	str	r3, [sp, #8]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	f107 030b 	add.w	r3, r7, #11
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	22fa      	movs	r2, #250	; 0xfa
 8000cc0:	21ee      	movs	r1, #238	; 0xee
 8000cc2:	4861      	ldr	r0, [pc, #388]	; (8000e48 <main+0x2fc>)
 8000cc4:	f001 fe1e 	bl	8002904 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, temp_lsb, 1, &adata2, 1, timeout);
 8000cc8:	2332      	movs	r3, #50	; 0x32
 8000cca:	9302      	str	r3, [sp, #8]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	f107 030a 	add.w	r3, r7, #10
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	22fb      	movs	r2, #251	; 0xfb
 8000cda:	21ee      	movs	r1, #238	; 0xee
 8000cdc:	485a      	ldr	r0, [pc, #360]	; (8000e48 <main+0x2fc>)
 8000cde:	f001 fe11 	bl	8002904 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, temp_xlsb, 1, &adata3, 1, timeout);
 8000ce2:	2332      	movs	r3, #50	; 0x32
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	9301      	str	r3, [sp, #4]
 8000cea:	f107 0309 	add.w	r3, r7, #9
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	22fc      	movs	r2, #252	; 0xfc
 8000cf4:	21ee      	movs	r1, #238	; 0xee
 8000cf6:	4854      	ldr	r0, [pc, #336]	; (8000e48 <main+0x2fc>)
 8000cf8:	f001 fe04 	bl	8002904 <HAL_I2C_Mem_Read>

	  HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 fbcd 	bl	800149c <HAL_Delay>
	  printf("data 0 :%d\r\n",adata1);
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	4619      	mov	r1, r3
 8000d06:	485a      	ldr	r0, [pc, #360]	; (8000e70 <main+0x324>)
 8000d08:	f003 ff9a 	bl	8004c40 <iprintf>
	  printf("data 1 :%d\r\n",adata2);
 8000d0c:	7abb      	ldrb	r3, [r7, #10]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4858      	ldr	r0, [pc, #352]	; (8000e74 <main+0x328>)
 8000d12:	f003 ff95 	bl	8004c40 <iprintf>
	  printf("data 2 :%d\r\n",adata3);
 8000d16:	7a7b      	ldrb	r3, [r7, #9]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4857      	ldr	r0, [pc, #348]	; (8000e78 <main+0x32c>)
 8000d1c:	f003 ff90 	bl	8004c40 <iprintf>
	  HAL_Delay(100);
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f000 fbbb 	bl	800149c <HAL_Delay>

//	  uint32_t data_temp = ((adata1 << 11) | (adata1 << 3) | adata3) & 0xFF;  // on les réunit

	//******************************* Usage des codes fournis*****************************************************

	  int temp= BMP280_get_temperature();
 8000d26:	f7ff fd39 	bl	800079c <BMP280_get_temperature>
 8000d2a:	6638      	str	r0, [r7, #96]	; 0x60
	  printf("Température: %d\r\n",temp);
 8000d2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d2e:	4853      	ldr	r0, [pc, #332]	; (8000e7c <main+0x330>)
 8000d30:	f003 ff86 	bl	8004c40 <iprintf>
	  int press= BMP280_get_pressure();
 8000d34:	f7ff fd64 	bl	8000800 <BMP280_get_pressure>
 8000d38:	65f8      	str	r0, [r7, #92]	; 0x5c
	  printf("Pression: %d\r\n",press);
 8000d3a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000d3c:	4850      	ldr	r0, [pc, #320]	; (8000e80 <main+0x334>)
 8000d3e:	f003 ff7f 	bl	8004c40 <iprintf>
	  HAL_Delay(1000);
 8000d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d46:	f000 fba9 	bl	800149c <HAL_Delay>

	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, addr_dig1, 1, &dig_T1, 2, timeout);
 8000d4a:	2332      	movs	r3, #50	; 0x32
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	2302      	movs	r3, #2
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	2288      	movs	r2, #136	; 0x88
 8000d5a:	21ee      	movs	r1, #238	; 0xee
 8000d5c:	483a      	ldr	r0, [pc, #232]	; (8000e48 <main+0x2fc>)
 8000d5e:	f001 fdd1 	bl	8002904 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, addr_dig2, 1, &dig_T2, 2, timeout);
 8000d62:	2332      	movs	r3, #50	; 0x32
 8000d64:	9302      	str	r3, [sp, #8]
 8000d66:	2302      	movs	r3, #2
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	228c      	movs	r2, #140	; 0x8c
 8000d72:	21ee      	movs	r1, #238	; 0xee
 8000d74:	4834      	ldr	r0, [pc, #208]	; (8000e48 <main+0x2fc>)
 8000d76:	f001 fdc5 	bl	8002904 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, addr_dig3, 1, &dig_T3, 2, timeout);
 8000d7a:	2332      	movs	r3, #50	; 0x32
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	2302      	movs	r3, #2
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	1cbb      	adds	r3, r7, #2
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	228a      	movs	r2, #138	; 0x8a
 8000d8a:	21ee      	movs	r1, #238	; 0xee
 8000d8c:	482e      	ldr	r0, [pc, #184]	; (8000e48 <main+0x2fc>)
 8000d8e:	f001 fdb9 	bl	8002904 <HAL_I2C_Mem_Read>

	  BMP280_S32_t var1, var2, T;
	  var1 = ((((temp>>3)-((BMP280_S32_t) dig_T1>>1)))*((BMP280_S32_t)dig_T2))>>11;
 8000d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d94:	10db      	asrs	r3, r3, #3
 8000d96:	88fa      	ldrh	r2, [r7, #6]
 8000d98:	0852      	lsrs	r2, r2, #1
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	12db      	asrs	r3, r3, #11
 8000da8:	65bb      	str	r3, [r7, #88]	; 0x58
	  var2 = (((((temp>>4)-((BMP280_S32_t) dig_T1))*((temp>>4)-((BMP280_S32_t)dig_T1)))>>12)*((BMP280_S32_t)dig_T3))>>14;
 8000daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dac:	111b      	asrs	r3, r3, #4
 8000dae:	88fa      	ldrh	r2, [r7, #6]
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000db4:	1112      	asrs	r2, r2, #4
 8000db6:	88f9      	ldrh	r1, [r7, #6]
 8000db8:	1a52      	subs	r2, r2, r1
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	131b      	asrs	r3, r3, #12
 8000dc0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	139b      	asrs	r3, r3, #14
 8000dca:	657b      	str	r3, [r7, #84]	; 0x54
	  t_fine=var1+var2;
 8000dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd0:	4413      	add	r3, r2
 8000dd2:	653b      	str	r3, [r7, #80]	; 0x50
	  T=(t_fine*5+128)>>8;
 8000dd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	3380      	adds	r3, #128	; 0x80
 8000dde:	121b      	asrs	r3, r3, #8
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  printf("Température compensée: %ld\r\n",T);
 8000de2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000de4:	4827      	ldr	r0, [pc, #156]	; (8000e84 <main+0x338>)
 8000de6:	f003 ff2b 	bl	8004c40 <iprintf>

	  //*********************************************************************************************************

//	  uint8_t rot = data_temp * 360/2^(20);
// Le moteur tourne de 2xT  (sinon angle trop petit)
	   rotpos[0] = T/5;
 8000dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dec:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <main+0x33c>)
 8000dee:	fb82 1203 	smull	r1, r2, r2, r3
 8000df2:	1052      	asrs	r2, r2, #1
 8000df4:	17db      	asrs	r3, r3, #31
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	   rotneg[0] = T/5;
 8000dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <main+0x33c>)
 8000e02:	fb82 1203 	smull	r1, r2, r2, r3
 8000e06:	1052      	asrs	r2, r2, #1
 8000e08:	17db      	asrs	r3, r3, #31
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  HAL_CAN_AddTxMessage(&hcan1, &pHeader_can1_moteur, rotpos, &ptxmailbox);
 8000e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e16:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000e1a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e1e:	4811      	ldr	r0, [pc, #68]	; (8000e64 <main+0x318>)
 8000e20:	f000 fc9f 	bl	8001762 <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e28:	f000 fb38 	bl	800149c <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1, &pHeader_can1_moteur, rotneg, &ptxmailbox);
 8000e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e34:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <main+0x318>)
 8000e3a:	f000 fc92 	bl	8001762 <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e42:	f000 fb2b 	bl	800149c <HAL_Delay>
  {
 8000e46:	e732      	b.n	8000cae <main+0x162>
 8000e48:	200000b4 	.word	0x200000b4
 8000e4c:	08005b9c 	.word	0x08005b9c
 8000e50:	08005ba8 	.word	0x08005ba8
 8000e54:	08005bb4 	.word	0x08005bb4
 8000e58:	08005bc8 	.word	0x08005bc8
 8000e5c:	08005bec 	.word	0x08005bec
 8000e60:	08005c0c 	.word	0x08005c0c
 8000e64:	2000008c 	.word	0x2000008c
 8000e68:	08005c3c 	.word	0x08005c3c
 8000e6c:	08005c54 	.word	0x08005c54
 8000e70:	08005c68 	.word	0x08005c68
 8000e74:	08005c78 	.word	0x08005c78
 8000e78:	08005c88 	.word	0x08005c88
 8000e7c:	08005c98 	.word	0x08005c98
 8000e80:	08005cac 	.word	0x08005cac
 8000e84:	08005cbc 	.word	0x08005cbc
 8000e88:	66666667 	.word	0x66666667

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2234      	movs	r2, #52	; 0x34
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 fde8 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <SystemClock_Config+0xd0>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <SystemClock_Config+0xd0>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <SystemClock_Config+0xd4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ed8:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <SystemClock_Config+0xd4>)
 8000eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <SystemClock_Config+0xd4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f00:	2308      	movs	r3, #8
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000f04:	2350      	movs	r3, #80	; 0x50
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 ff0f 	bl	8003d3c <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f24:	f000 f81e 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2102      	movs	r1, #2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fbaf 	bl	80036a8 <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f50:	f000 f808 	bl	8000f64 <Error_Handler>
  }
}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	; 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fae:	2007      	movs	r0, #7
 8000fb0:	f000 fd64 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 fa26 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e00a      	b.n	800103c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001026:	f3af 8000 	nop.w
 800102a:	4601      	mov	r1, r0
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf0      	blt.n	8001026 <_read+0x12>
	}

return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e009      	b.n	8001074 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fd5d 	bl	8000b28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf1      	blt.n	8001060 <_write+0x12>
	}
	return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_close>:

int _close(int file)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
	return -1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ae:	605a      	str	r2, [r3, #4]
	return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_isatty>:

int _isatty(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	return 1;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f003 fc6c 	bl	80049fc <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20020000 	.word	0x20020000
 8001150:	00000400 	.word	0x00000400
 8001154:	20000108 	.word	0x20000108
 8001158:	200001a8 	.word	0x200001a8

0800115c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_USART2_UART_Init+0x50>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b8:	f003 f85e 	bl	8004278 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c2:	f7ff fecf 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000010c 	.word	0x2000010c
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART3_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART3_UART_Init+0x4c>)
 800120c:	f003 f834 	bl	8004278 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f7ff fea5 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000150 	.word	0x20000150
 8001224:	40004800 	.word	0x40004800

08001228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a41      	ldr	r2, [pc, #260]	; (800134c <HAL_UART_MspInit+0x124>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12c      	bne.n	80012a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_UART_MspInit+0x128>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a3f      	ldr	r2, [pc, #252]	; (8001350 <HAL_UART_MspInit+0x128>)
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_UART_MspInit+0x128>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	4b39      	ldr	r3, [pc, #228]	; (8001350 <HAL_UART_MspInit+0x128>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a38      	ldr	r2, [pc, #224]	; (8001350 <HAL_UART_MspInit+0x128>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_UART_MspInit+0x128>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001282:	230c      	movs	r3, #12
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001292:	2307      	movs	r3, #7
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	482d      	ldr	r0, [pc, #180]	; (8001354 <HAL_UART_MspInit+0x12c>)
 800129e:	f000 fc21 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012a2:	e04f      	b.n	8001344 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <HAL_UART_MspInit+0x130>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d14a      	bne.n	8001344 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a26      	ldr	r2, [pc, #152]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_UART_MspInit+0x128>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001302:	2320      	movs	r3, #32
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001312:	2307      	movs	r3, #7
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	480f      	ldr	r0, [pc, #60]	; (800135c <HAL_UART_MspInit+0x134>)
 800131e:	f000 fbe1 	bl	8001ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001334:	2307      	movs	r3, #7
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <HAL_UART_MspInit+0x138>)
 8001340:	f000 fbd0 	bl	8001ae4 <HAL_GPIO_Init>
}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004400 	.word	0x40004400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	40004800 	.word	0x40004800
 800135c:	40020800 	.word	0x40020800
 8001360:	40020400 	.word	0x40020400

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	; (80013b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800138e:	f7ff fee5 	bl	800115c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f003 fb39 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fbd9 	bl	8000b4c <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013a8:	08005d9c 	.word	0x08005d9c
  ldr r2, =_sbss
 80013ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013b0:	200001a8 	.word	0x200001a8

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 fb4b 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fdc0 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fb55 	bl	8001aca <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 fb2b 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	20000194 	.word	0x20000194

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000194 	.word	0x20000194

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0ed      	b.n	80016d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff f9e4 	bl	80008d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff ffb4 	bl	8001484 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800151e:	e012      	b.n	8001546 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001520:	f7ff ffb0 	bl	8001484 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b0a      	cmp	r3, #10
 800152c:	d90b      	bls.n	8001546 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2205      	movs	r2, #5
 800153e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0c5      	b.n	80016d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0e5      	beq.n	8001520 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0202 	bic.w	r2, r2, #2
 8001562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001564:	f7ff ff8e 	bl	8001484 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800156a:	e012      	b.n	8001592 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800156c:	f7ff ff8a 	bl	8001484 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b0a      	cmp	r3, #10
 8001578:	d90b      	bls.n	8001592 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2205      	movs	r2, #5
 800158a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e09f      	b.n	80016d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e5      	bne.n	800156c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e1b      	ldrb	r3, [r3, #24]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e007      	b.n	80015ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7e5b      	ldrb	r3, [r3, #25]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e9b      	ldrb	r3, [r3, #26]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0220 	orr.w	r2, r2, #32
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0220 	bic.w	r2, r2, #32
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7edb      	ldrb	r3, [r3, #27]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0210 	bic.w	r2, r2, #16
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e007      	b.n	8001648 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0210 	orr.w	r2, r2, #16
 8001646:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7f1b      	ldrb	r3, [r3, #28]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0208 	orr.w	r2, r2, #8
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e007      	b.n	8001672 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0208 	bic.w	r2, r2, #8
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7f5b      	ldrb	r3, [r3, #29]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0204 	orr.w	r2, r2, #4
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e007      	b.n	800169c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0204 	bic.w	r2, r2, #4
 800169a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	ea42 0103 	orr.w	r1, r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d12e      	bne.n	800174c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001706:	f7ff febd 	bl	8001484 <HAL_GetTick>
 800170a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800170c:	e012      	b.n	8001734 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170e:	f7ff feb9 	bl	8001484 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b0a      	cmp	r3, #10
 800171a:	d90b      	bls.n	8001734 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2205      	movs	r2, #5
 800172c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e012      	b.n	800175a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1e5      	bne.n	800170e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e006      	b.n	800175a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001762:	b480      	push	{r7}
 8001764:	b089      	sub	sp, #36	; 0x24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001776:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d003      	beq.n	800178e <HAL_CAN_AddTxMessage+0x2c>
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	2b02      	cmp	r3, #2
 800178a:	f040 80b8 	bne.w	80018fe <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10a      	bne.n	80017ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d105      	bne.n	80017ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80a0 	beq.w	80018ee <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	0e1b      	lsrs	r3, r3, #24
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d907      	bls.n	80017ce <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e09e      	b.n	800190c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017ce:	2201      	movs	r2, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017ea:	68f9      	ldr	r1, [r7, #12]
 80017ec:	6809      	ldr	r1, [r1, #0]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3318      	adds	r3, #24
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	440b      	add	r3, r1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e00f      	b.n	800181c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001806:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800180c:	68f9      	ldr	r1, [r7, #12]
 800180e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001810:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3318      	adds	r3, #24
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	440b      	add	r3, r1
 800181a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3318      	adds	r3, #24
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	440b      	add	r3, r1
 800182c:	3304      	adds	r3, #4
 800182e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	7d1b      	ldrb	r3, [r3, #20]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d111      	bne.n	800185c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3318      	adds	r3, #24
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4413      	add	r3, r2
 8001844:	3304      	adds	r3, #4
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	6811      	ldr	r1, [r2, #0]
 800184c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3318      	adds	r3, #24
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	440b      	add	r3, r1
 8001858:	3304      	adds	r3, #4
 800185a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3307      	adds	r3, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	061a      	lsls	r2, r3, #24
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3306      	adds	r3, #6
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	041b      	lsls	r3, r3, #16
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3305      	adds	r3, #5
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	4313      	orrs	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	3204      	adds	r2, #4
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	4610      	mov	r0, r2
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	6811      	ldr	r1, [r2, #0]
 8001884:	ea43 0200 	orr.w	r2, r3, r0
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	440b      	add	r3, r1
 800188e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001892:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3303      	adds	r3, #3
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	061a      	lsls	r2, r3, #24
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3302      	adds	r3, #2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	041b      	lsls	r3, r3, #16
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3301      	adds	r3, #1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	4313      	orrs	r3, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	4610      	mov	r0, r2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	6811      	ldr	r1, [r2, #0]
 80018ba:	ea43 0200 	orr.w	r2, r3, r0
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	440b      	add	r3, r1
 80018c4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3318      	adds	r3, #24
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3318      	adds	r3, #24
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	440b      	add	r3, r1
 80018e8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e00e      	b.n	800190c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e006      	b.n	800190c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	3724      	adds	r7, #36	; 0x24
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff47 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff5c 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffb0 	bl	8001a38 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e165      	b.n	8001dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8154 	bne.w	8001dc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d005      	beq.n	8001b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d130      	bne.n	8001b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 0201 	and.w	r2, r3, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d017      	beq.n	8001bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80ae 	beq.w	8001dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_GPIO_Init+0x300>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a5c      	ldr	r2, [pc, #368]	; (8001de4 <HAL_GPIO_Init+0x300>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <HAL_GPIO_Init+0x300>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4f      	ldr	r2, [pc, #316]	; (8001dec <HAL_GPIO_Init+0x308>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d025      	beq.n	8001cfe <HAL_GPIO_Init+0x21a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4e      	ldr	r2, [pc, #312]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01f      	beq.n	8001cfa <HAL_GPIO_Init+0x216>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4d      	ldr	r2, [pc, #308]	; (8001df4 <HAL_GPIO_Init+0x310>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x212>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4c      	ldr	r2, [pc, #304]	; (8001df8 <HAL_GPIO_Init+0x314>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x20e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4b      	ldr	r2, [pc, #300]	; (8001dfc <HAL_GPIO_Init+0x318>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x20a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4a      	ldr	r2, [pc, #296]	; (8001e00 <HAL_GPIO_Init+0x31c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x206>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a49      	ldr	r2, [pc, #292]	; (8001e04 <HAL_GPIO_Init+0x320>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x202>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x21c>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae96 	bls.w	8001b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12b      	b.n	80020aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fe16 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f001 fcf2 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a81      	ldr	r2, [pc, #516]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d807      	bhi.n	8001ec4 <HAL_I2C_Init+0x84>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a80      	ldr	r2, [pc, #512]	; (80020b8 <HAL_I2C_Init+0x278>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e006      	b.n	8001ed2 <HAL_I2C_Init+0x92>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a7d      	ldr	r2, [pc, #500]	; (80020bc <HAL_I2C_Init+0x27c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e7      	b.n	80020aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a78      	ldr	r2, [pc, #480]	; (80020c0 <HAL_I2C_Init+0x280>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d802      	bhi.n	8001f14 <HAL_I2C_Init+0xd4>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	e009      	b.n	8001f28 <HAL_I2C_Init+0xe8>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_I2C_Init+0x284>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	3301      	adds	r3, #1
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	495c      	ldr	r1, [pc, #368]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d819      	bhi.n	8001f7c <HAL_I2C_Init+0x13c>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e59      	subs	r1, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_I2C_Init+0x138>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e59      	subs	r1, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	e051      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e04f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_I2C_Init+0x168>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e012      	b.n	8001fce <HAL_I2C_Init+0x18e>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x196>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e022      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <HAL_I2C_Init+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e58      	subs	r0, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800204a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6911      	ldr	r1, [r2, #16]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	000186a0 	.word	0x000186a0
 80020b8:	001e847f 	.word	0x001e847f
 80020bc:	003d08ff 	.word	0x003d08ff
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	461a      	mov	r2, r3
 80020d4:	460b      	mov	r3, r1
 80020d6:	817b      	strh	r3, [r7, #10]
 80020d8:	4613      	mov	r3, r2
 80020da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff f9d2 	bl	8001484 <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 80e0 	bne.w	80022b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	4970      	ldr	r1, [pc, #448]	; (80022bc <HAL_I2C_Master_Transmit+0x1f4>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f001 f8f6 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e0d3      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_Master_Transmit+0x50>
 8002114:	2302      	movs	r3, #2
 8002116:	e0cc      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2221      	movs	r2, #33	; 0x21
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fde2 	bl	8002d50 <I2C_MasterRequestWrite>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e08d      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021ac:	e066      	b.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f001 f970 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d107      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11b      	bne.n	8002250 <HAL_I2C_Master_Transmit+0x188>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6a39      	ldr	r1, [r7, #32]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f001 f960 	bl	800351a <I2C_WaitOnBTFFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b04      	cmp	r3, #4
 8002266:	d107      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002276:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e01a      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d194      	bne.n	80021ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	00100002 	.word	0x00100002
 80022c0:	ffff0000 	.word	0xffff0000

080022c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	; 0x30
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	461a      	mov	r2, r3
 80022d0:	460b      	mov	r3, r1
 80022d2:	817b      	strh	r3, [r7, #10]
 80022d4:	4613      	mov	r3, r2
 80022d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff f8d4 	bl	8001484 <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	f040 820b 	bne.w	8002702 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2319      	movs	r3, #25
 80022f2:	2201      	movs	r2, #1
 80022f4:	497c      	ldr	r1, [pc, #496]	; (80024e8 <HAL_I2C_Master_Receive+0x224>)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fff8 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	e1fe      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_I2C_Master_Receive+0x50>
 8002310:	2302      	movs	r3, #2
 8002312:	e1f7      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d007      	beq.n	800233a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002348:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2222      	movs	r2, #34	; 0x22
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2210      	movs	r2, #16
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a5c      	ldr	r2, [pc, #368]	; (80024ec <HAL_I2C_Master_Receive+0x228>)
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800237c:	8979      	ldrh	r1, [r7, #10]
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fd66 	bl	8002e54 <I2C_MasterRequestRead>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e1b8      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d113      	bne.n	80023c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e18c      	b.n	80026dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d11b      	bne.n	8002402 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e16c      	b.n	80026dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	2b02      	cmp	r3, #2
 8002408:	d11b      	bne.n	8002442 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002418:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	e14c      	b.n	80026dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002450:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002468:	e138      	b.n	80026dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	2b03      	cmp	r3, #3
 8002470:	f200 80f1 	bhi.w	8002656 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b01      	cmp	r3, #1
 800247a:	d123      	bne.n	80024c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f001 f88b 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e139      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024c2:	e10b      	b.n	80026dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d14e      	bne.n	800256a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	2200      	movs	r2, #0
 80024d4:	4906      	ldr	r1, [pc, #24]	; (80024f0 <HAL_I2C_Master_Receive+0x22c>)
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 ff08 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e10e      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
 80024e6:	bf00      	nop
 80024e8:	00100002 	.word	0x00100002
 80024ec:	ffff0000 	.word	0xffff0000
 80024f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002568:	e0b8      	b.n	80026dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	2200      	movs	r2, #0
 8002572:	4966      	ldr	r1, [pc, #408]	; (800270c <HAL_I2C_Master_Receive+0x448>)
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 feb9 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0bf      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	494f      	ldr	r1, [pc, #316]	; (800270c <HAL_I2C_Master_Receive+0x448>)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fe8b 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e091      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002654:	e042      	b.n	80026dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 ff9e 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e04c      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d118      	bne.n	80026dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f47f aec2 	bne.w	800246a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002702:	2302      	movs	r3, #2
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	3728      	adds	r7, #40	; 0x28
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	00010004 	.word	0x00010004

08002710 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	817b      	strh	r3, [r7, #10]
 8002722:	460b      	mov	r3, r1
 8002724:	813b      	strh	r3, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800272a:	f7fe feab 	bl	8001484 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b20      	cmp	r3, #32
 800273a:	f040 80d9 	bne.w	80028f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2319      	movs	r3, #25
 8002744:	2201      	movs	r2, #1
 8002746:	496d      	ldr	r1, [pc, #436]	; (80028fc <HAL_I2C_Mem_Write+0x1ec>)
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fdcf 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
 8002756:	e0cc      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_I2C_Mem_Write+0x56>
 8002762:	2302      	movs	r3, #2
 8002764:	e0c5      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d007      	beq.n	800278c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2221      	movs	r2, #33	; 0x21
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2240      	movs	r2, #64	; 0x40
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <HAL_I2C_Mem_Write+0x1f0>)
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ce:	88f8      	ldrh	r0, [r7, #6]
 80027d0:	893a      	ldrh	r2, [r7, #8]
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4603      	mov	r3, r0
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fc06 	bl	8002ff0 <I2C_RequestMemoryWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d052      	beq.n	8002890 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e081      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fe50 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00d      	beq.n	800281a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2b04      	cmp	r3, #4
 8002804:	d107      	bne.n	8002816 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e06b      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d11b      	bne.n	8002890 <HAL_I2C_Mem_Write+0x180>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d017      	beq.n	8002890 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1aa      	bne.n	80027ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fe3c 	bl	800351a <I2C_WaitOnBTFFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e016      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	00100002 	.word	0x00100002
 8002900:	ffff0000 	.word	0xffff0000

08002904 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	4608      	mov	r0, r1
 800290e:	4611      	mov	r1, r2
 8002910:	461a      	mov	r2, r3
 8002912:	4603      	mov	r3, r0
 8002914:	817b      	strh	r3, [r7, #10]
 8002916:	460b      	mov	r3, r1
 8002918:	813b      	strh	r3, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800291e:	f7fe fdb1 	bl	8001484 <HAL_GetTick>
 8002922:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b20      	cmp	r3, #32
 800292e:	f040 8208 	bne.w	8002d42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2319      	movs	r3, #25
 8002938:	2201      	movs	r2, #1
 800293a:	497b      	ldr	r1, [pc, #492]	; (8002b28 <HAL_I2C_Mem_Read+0x224>)
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fcd5 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
 800294a:	e1fb      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_I2C_Mem_Read+0x56>
 8002956:	2302      	movs	r3, #2
 8002958:	e1f4      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d007      	beq.n	8002980 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2222      	movs	r2, #34	; 0x22
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a5b      	ldr	r2, [pc, #364]	; (8002b2c <HAL_I2C_Mem_Read+0x228>)
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c2:	88f8      	ldrh	r0, [r7, #6]
 80029c4:	893a      	ldrh	r2, [r7, #8]
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4603      	mov	r3, r0
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fba2 	bl	800311c <I2C_RequestMemoryRead>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e1b0      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d113      	bne.n	8002a12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	623b      	str	r3, [r7, #32]
 80029fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e184      	b.n	8002d1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d11b      	bne.n	8002a52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e164      	b.n	8002d1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d11b      	bne.n	8002a92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	e144      	b.n	8002d1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002aa8:	e138      	b.n	8002d1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	f200 80f1 	bhi.w	8002c96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d123      	bne.n	8002b04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fd6b 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e139      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b02:	e10b      	b.n	8002d1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d14e      	bne.n	8002baa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	2200      	movs	r2, #0
 8002b14:	4906      	ldr	r1, [pc, #24]	; (8002b30 <HAL_I2C_Mem_Read+0x22c>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fbe8 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e10e      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
 8002b26:	bf00      	nop
 8002b28:	00100002 	.word	0x00100002
 8002b2c:	ffff0000 	.word	0xffff0000
 8002b30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba8:	e0b8      	b.n	8002d1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4966      	ldr	r1, [pc, #408]	; (8002d4c <HAL_I2C_Mem_Read+0x448>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fb99 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0bf      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	494f      	ldr	r1, [pc, #316]	; (8002d4c <HAL_I2C_Mem_Read+0x448>)
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fb6b 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e091      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c94:	e042      	b.n	8002d1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fc7e 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e04c      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d118      	bne.n	8002d1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f aec2 	bne.w	8002aaa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	00010004 	.word	0x00010004

08002d50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d006      	beq.n	8002d7a <I2C_MasterRequestWrite+0x2a>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d003      	beq.n	8002d7a <I2C_MasterRequestWrite+0x2a>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d78:	d108      	bne.n	8002d8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e00b      	b.n	8002da4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	d107      	bne.n	8002da4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fa9b 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dca:	d103      	bne.n	8002dd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e035      	b.n	8002e44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de0:	d108      	bne.n	8002df4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de2:	897b      	ldrh	r3, [r7, #10]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df0:	611a      	str	r2, [r3, #16]
 8002df2:	e01b      	b.n	8002e2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002df4:	897b      	ldrh	r3, [r7, #10]
 8002df6:	11db      	asrs	r3, r3, #7
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f003 0306 	and.w	r3, r3, #6
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f063 030f 	orn	r3, r3, #15
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <I2C_MasterRequestWrite+0xfc>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fac1 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e010      	b.n	8002e44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e22:	897b      	ldrh	r3, [r7, #10]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4907      	ldr	r1, [pc, #28]	; (8002e50 <I2C_MasterRequestWrite+0x100>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fab1 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	00010008 	.word	0x00010008
 8002e50:	00010002 	.word	0x00010002

08002e54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	460b      	mov	r3, r1
 8002e62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d006      	beq.n	8002e8e <I2C_MasterRequestRead+0x3a>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d003      	beq.n	8002e8e <I2C_MasterRequestRead+0x3a>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e8c:	d108      	bne.n	8002ea0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e00b      	b.n	8002eb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	2b11      	cmp	r3, #17
 8002ea6:	d107      	bne.n	8002eb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fa11 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ede:	d103      	bne.n	8002ee8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e079      	b.n	8002fe0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef4:	d108      	bne.n	8002f08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	e05f      	b.n	8002fc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f08:	897b      	ldrh	r3, [r7, #10]
 8002f0a:	11db      	asrs	r3, r3, #7
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f003 0306 	and.w	r3, r3, #6
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f063 030f 	orn	r3, r3, #15
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4930      	ldr	r1, [pc, #192]	; (8002fe8 <I2C_MasterRequestRead+0x194>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fa37 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e054      	b.n	8002fe0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4929      	ldr	r1, [pc, #164]	; (8002fec <I2C_MasterRequestRead+0x198>)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fa27 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e044      	b.n	8002fe0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f9af 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00d      	beq.n	8002fb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa2:	d103      	bne.n	8002fac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e017      	b.n	8002fe0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002fb0:	897b      	ldrh	r3, [r7, #10]
 8002fb2:	11db      	asrs	r3, r3, #7
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0306 	and.w	r3, r3, #6
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f063 030e 	orn	r3, r3, #14
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <I2C_MasterRequestRead+0x198>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f9e3 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	00010008 	.word	0x00010008
 8002fec:	00010002 	.word	0x00010002

08002ff0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	817b      	strh	r3, [r7, #10]
 8003002:	460b      	mov	r3, r1
 8003004:	813b      	strh	r3, [r7, #8]
 8003006:	4613      	mov	r3, r2
 8003008:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	2200      	movs	r2, #0
 8003022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f960 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003040:	d103      	bne.n	800304a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e05f      	b.n	800310e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800304e:	897b      	ldrh	r3, [r7, #10]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800305c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	492d      	ldr	r1, [pc, #180]	; (8003118 <I2C_RequestMemoryWrite+0x128>)
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f998 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e04c      	b.n	800310e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	6a39      	ldr	r1, [r7, #32]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fa02 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d107      	bne.n	80030b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e02b      	b.n	800310e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030bc:	893b      	ldrh	r3, [r7, #8]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]
 80030c6:	e021      	b.n	800310c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030c8:	893b      	ldrh	r3, [r7, #8]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	6a39      	ldr	r1, [r7, #32]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f9dc 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d107      	bne.n	80030fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e005      	b.n	800310e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003102:	893b      	ldrh	r3, [r7, #8]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	00010002 	.word	0x00010002

0800311c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	817b      	strh	r3, [r7, #10]
 800312e:	460b      	mov	r3, r1
 8003130:	813b      	strh	r3, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003154:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	2200      	movs	r2, #0
 800315e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f8c2 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317c:	d103      	bne.n	8003186 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0aa      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003198:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	4952      	ldr	r1, [pc, #328]	; (80032e8 <I2C_RequestMemoryRead+0x1cc>)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8fa 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e097      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	6a39      	ldr	r1, [r7, #32]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f964 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00d      	beq.n	80031f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d107      	bne.n	80031ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e076      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031f8:	893b      	ldrh	r3, [r7, #8]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]
 8003202:	e021      	b.n	8003248 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	b29b      	uxth	r3, r3
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	6a39      	ldr	r1, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f93e 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e050      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800323e:	893b      	ldrh	r3, [r7, #8]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	6a39      	ldr	r1, [r7, #32]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f923 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00d      	beq.n	8003274 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	2b04      	cmp	r3, #4
 800325e:	d107      	bne.n	8003270 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e035      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003282:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	2200      	movs	r2, #0
 800328c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f82b 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032aa:	d103      	bne.n	80032b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e013      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	6a3a      	ldr	r2, [r7, #32]
 80032cc:	4906      	ldr	r1, [pc, #24]	; (80032e8 <I2C_RequestMemoryRead+0x1cc>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f863 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	00010002 	.word	0x00010002

080032ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fc:	e025      	b.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d021      	beq.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7fe f8bd 	bl	8001484 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d116      	bne.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f043 0220 	orr.w	r2, r3, #32
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e023      	b.n	8003392 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10d      	bne.n	8003370 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	e00c      	b.n	800338a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	429a      	cmp	r2, r3
 800338e:	d0b6      	beq.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033a8:	e051      	b.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b8:	d123      	bne.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0204 	orr.w	r2, r3, #4
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e046      	b.n	8003490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d021      	beq.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe f83b 	bl	8001484 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d116      	bne.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e020      	b.n	8003490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10c      	bne.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e00b      	b.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	43da      	mvns	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4013      	ands	r3, r2
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d18d      	bne.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a4:	e02d      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8ce 	bl	8003648 <I2C_IsAcknowledgeFailed>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02d      	b.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d021      	beq.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fd ffe1 	bl	8001484 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d116      	bne.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e007      	b.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d1ca      	bne.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003526:	e02d      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f88d 	bl	8003648 <I2C_IsAcknowledgeFailed>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e02d      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d021      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fd ffa0 	bl	8001484 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d1ca      	bne.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a8:	e042      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d119      	bne.n	80035ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e029      	b.n	8003640 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ec:	f7fd ff4a 	bl	8001484 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d1b5      	bne.n	80035aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365e:	d11b      	bne.n	8003698 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003668:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0cc      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b68      	ldr	r3, [pc, #416]	; (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d90c      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b65      	ldr	r3, [pc, #404]	; (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b63      	ldr	r3, [pc, #396]	; (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0b8      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036fc:	4b59      	ldr	r3, [pc, #356]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003714:	4b53      	ldr	r3, [pc, #332]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a52      	ldr	r2, [pc, #328]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800371e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b50      	ldr	r3, [pc, #320]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	494d      	ldr	r1, [pc, #308]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d044      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d119      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e07f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d003      	beq.n	8003766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003762:	2b03      	cmp	r3, #3
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e067      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b37      	ldr	r3, [pc, #220]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4934      	ldr	r1, [pc, #208]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003798:	f7fd fe74 	bl	8001484 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fd fe70 	bl	8001484 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e04f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d20c      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b22      	ldr	r3, [pc, #136]	; (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e032      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037fc:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4916      	ldr	r1, [pc, #88]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	490e      	ldr	r1, [pc, #56]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382e:	f000 f855 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003832:	4602      	mov	r2, r0
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	490a      	ldr	r1, [pc, #40]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	5ccb      	ldrb	r3, [r1, r3]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	4a09      	ldr	r2, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fdd4 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023c00 	.word	0x40023c00
 8003864:	40023800 	.word	0x40023800
 8003868:	08005cdc 	.word	0x08005cdc
 800386c:	20000000 	.word	0x20000000
 8003870:	20000004 	.word	0x20000004

08003874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003890:	f7ff fff0 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08005cec 	.word	0x08005cec

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b8:	f7ff ffdc 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0b5b      	lsrs	r3, r3, #13
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08005cec 	.word	0x08005cec

080038dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e0:	b0ae      	sub	sp, #184	; 0xb8
 80038e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003902:	4bcb      	ldr	r3, [pc, #812]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b0c      	cmp	r3, #12
 800390c:	f200 8206 	bhi.w	8003d1c <HAL_RCC_GetSysClockFreq+0x440>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800394d 	.word	0x0800394d
 800391c:	08003d1d 	.word	0x08003d1d
 8003920:	08003d1d 	.word	0x08003d1d
 8003924:	08003d1d 	.word	0x08003d1d
 8003928:	08003955 	.word	0x08003955
 800392c:	08003d1d 	.word	0x08003d1d
 8003930:	08003d1d 	.word	0x08003d1d
 8003934:	08003d1d 	.word	0x08003d1d
 8003938:	0800395d 	.word	0x0800395d
 800393c:	08003d1d 	.word	0x08003d1d
 8003940:	08003d1d 	.word	0x08003d1d
 8003944:	08003d1d 	.word	0x08003d1d
 8003948:	08003b4d 	.word	0x08003b4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4bb9      	ldr	r3, [pc, #740]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x358>)
 800394e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003952:	e1e7      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003954:	4bb8      	ldr	r3, [pc, #736]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800395a:	e1e3      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800395c:	4bb4      	ldr	r3, [pc, #720]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003968:	4bb1      	ldr	r3, [pc, #708]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d071      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003974:	4bae      	ldr	r3, [pc, #696]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003980:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800399a:	4622      	mov	r2, r4
 800399c:	462b      	mov	r3, r5
 800399e:	f04f 0000 	mov.w	r0, #0
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	0159      	lsls	r1, r3, #5
 80039a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ac:	0150      	lsls	r0, r2, #5
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4621      	mov	r1, r4
 80039b4:	1a51      	subs	r1, r2, r1
 80039b6:	6439      	str	r1, [r7, #64]	; 0x40
 80039b8:	4629      	mov	r1, r5
 80039ba:	eb63 0301 	sbc.w	r3, r3, r1
 80039be:	647b      	str	r3, [r7, #68]	; 0x44
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80039cc:	4649      	mov	r1, r9
 80039ce:	018b      	lsls	r3, r1, #6
 80039d0:	4641      	mov	r1, r8
 80039d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039d6:	4641      	mov	r1, r8
 80039d8:	018a      	lsls	r2, r1, #6
 80039da:	4641      	mov	r1, r8
 80039dc:	1a51      	subs	r1, r2, r1
 80039de:	63b9      	str	r1, [r7, #56]	; 0x38
 80039e0:	4649      	mov	r1, r9
 80039e2:	eb63 0301 	sbc.w	r3, r3, r1
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80039f4:	4649      	mov	r1, r9
 80039f6:	00cb      	lsls	r3, r1, #3
 80039f8:	4641      	mov	r1, r8
 80039fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fe:	4641      	mov	r1, r8
 8003a00:	00ca      	lsls	r2, r1, #3
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	4622      	mov	r2, r4
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0e:	462b      	mov	r3, r5
 8003a10:	460a      	mov	r2, r1
 8003a12:	eb42 0303 	adc.w	r3, r2, r3
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a24:	4629      	mov	r1, r5
 8003a26:	024b      	lsls	r3, r1, #9
 8003a28:	4621      	mov	r1, r4
 8003a2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a2e:	4621      	mov	r1, r4
 8003a30:	024a      	lsls	r2, r1, #9
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a44:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a48:	f7fc fc32 	bl	80002b0 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4613      	mov	r3, r2
 8003a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a56:	e067      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a58:	4b75      	ldr	r3, [pc, #468]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a64:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a72:	2300      	movs	r3, #0
 8003a74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a76:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	f04f 0000 	mov.w	r0, #0
 8003a82:	f04f 0100 	mov.w	r1, #0
 8003a86:	0159      	lsls	r1, r3, #5
 8003a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a8c:	0150      	lsls	r0, r2, #5
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4621      	mov	r1, r4
 8003a94:	1a51      	subs	r1, r2, r1
 8003a96:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a98:	4629      	mov	r1, r5
 8003a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003aac:	4649      	mov	r1, r9
 8003aae:	018b      	lsls	r3, r1, #6
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	018a      	lsls	r2, r1, #6
 8003aba:	4641      	mov	r1, r8
 8003abc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ad6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ada:	4692      	mov	sl, r2
 8003adc:	469b      	mov	fp, r3
 8003ade:	4623      	mov	r3, r4
 8003ae0:	eb1a 0303 	adds.w	r3, sl, r3
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003afa:	4629      	mov	r1, r5
 8003afc:	028b      	lsls	r3, r1, #10
 8003afe:	4621      	mov	r1, r4
 8003b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b04:	4621      	mov	r1, r4
 8003b06:	028a      	lsls	r2, r1, #10
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b10:	2200      	movs	r2, #0
 8003b12:	673b      	str	r3, [r7, #112]	; 0x70
 8003b14:	677a      	str	r2, [r7, #116]	; 0x74
 8003b16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b1a:	f7fc fbc9 	bl	80002b0 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4613      	mov	r3, r2
 8003b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b28:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b4a:	e0eb      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b4c:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b58:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d06b      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b64:	4b32      	ldr	r3, [pc, #200]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b76:	663b      	str	r3, [r7, #96]	; 0x60
 8003b78:	2300      	movs	r3, #0
 8003b7a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b80:	4622      	mov	r2, r4
 8003b82:	462b      	mov	r3, r5
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	0159      	lsls	r1, r3, #5
 8003b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b92:	0150      	lsls	r0, r2, #5
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4621      	mov	r1, r4
 8003b9a:	1a51      	subs	r1, r2, r1
 8003b9c:	61b9      	str	r1, [r7, #24]
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bb2:	4659      	mov	r1, fp
 8003bb4:	018b      	lsls	r3, r1, #6
 8003bb6:	4651      	mov	r1, sl
 8003bb8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	018a      	lsls	r2, r1, #6
 8003bc0:	4651      	mov	r1, sl
 8003bc2:	ebb2 0801 	subs.w	r8, r2, r1
 8003bc6:	4659      	mov	r1, fp
 8003bc8:	eb63 0901 	sbc.w	r9, r3, r1
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be0:	4690      	mov	r8, r2
 8003be2:	4699      	mov	r9, r3
 8003be4:	4623      	mov	r3, r4
 8003be6:	eb18 0303 	adds.w	r3, r8, r3
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	462b      	mov	r3, r5
 8003bee:	eb49 0303 	adc.w	r3, r9, r3
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c00:	4629      	mov	r1, r5
 8003c02:	024b      	lsls	r3, r1, #9
 8003c04:	4621      	mov	r1, r4
 8003c06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	024a      	lsls	r2, r1, #9
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c16:	2200      	movs	r2, #0
 8003c18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c20:	f7fc fb46 	bl	80002b0 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4613      	mov	r3, r2
 8003c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c2e:	e065      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x420>
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3c:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	2200      	movs	r2, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	4611      	mov	r1, r2
 8003c48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4e:	2300      	movs	r3, #0
 8003c50:	657b      	str	r3, [r7, #84]	; 0x54
 8003c52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c56:	4642      	mov	r2, r8
 8003c58:	464b      	mov	r3, r9
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4641      	mov	r1, r8
 8003c70:	1a51      	subs	r1, r2, r1
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	4649      	mov	r1, r9
 8003c76:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c88:	4659      	mov	r1, fp
 8003c8a:	018b      	lsls	r3, r1, #6
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c92:	4651      	mov	r1, sl
 8003c94:	018a      	lsls	r2, r1, #6
 8003c96:	4651      	mov	r1, sl
 8003c98:	1a54      	subs	r4, r2, r1
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	eb63 0501 	sbc.w	r5, r3, r1
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	00eb      	lsls	r3, r5, #3
 8003caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cae:	00e2      	lsls	r2, r4, #3
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	461d      	mov	r5, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	18e3      	adds	r3, r4, r3
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	464b      	mov	r3, r9
 8003cbc:	eb45 0303 	adc.w	r3, r5, r3
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	028b      	lsls	r3, r1, #10
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd8:	4621      	mov	r1, r4
 8003cda:	028a      	lsls	r2, r1, #10
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cee:	f7fc fadf 	bl	80002b0 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	0f1b      	lsrs	r3, r3, #28
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d1a:	e003      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	37b8      	adds	r7, #184	; 0xb8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400

08003d3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e28d      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8083 	beq.w	8003e62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d5c:	4b94      	ldr	r3, [pc, #592]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d019      	beq.n	8003d9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d68:	4b91      	ldr	r3, [pc, #580]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d74:	4b8e      	ldr	r3, [pc, #568]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d80:	d00c      	beq.n	8003d9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d82:	4b8b      	ldr	r3, [pc, #556]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d112      	bne.n	8003db4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8e:	4b88      	ldr	r3, [pc, #544]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	4b84      	ldr	r3, [pc, #528]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d05b      	beq.n	8003e60 <HAL_RCC_OscConfig+0x124>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d157      	bne.n	8003e60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e25a      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d106      	bne.n	8003dcc <HAL_RCC_OscConfig+0x90>
 8003dbe:	4b7c      	ldr	r3, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7b      	ldr	r2, [pc, #492]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e01d      	b.n	8003e08 <HAL_RCC_OscConfig+0xcc>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0xb4>
 8003dd6:	4b76      	ldr	r3, [pc, #472]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a75      	ldr	r2, [pc, #468]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4b73      	ldr	r3, [pc, #460]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a72      	ldr	r2, [pc, #456]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0xcc>
 8003df0:	4b6f      	ldr	r3, [pc, #444]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6e      	ldr	r2, [pc, #440]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	4b6c      	ldr	r3, [pc, #432]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d013      	beq.n	8003e38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fd fb38 	bl	8001484 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e18:	f7fd fb34 	bl	8001484 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	; 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e21f      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2a:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0xdc>
 8003e36:	e014      	b.n	8003e62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fb24 	bl	8001484 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e40:	f7fd fb20 	bl	8001484 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	; 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e20b      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	4b57      	ldr	r3, [pc, #348]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x104>
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d06f      	beq.n	8003f4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e6e:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d017      	beq.n	8003eaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e7a:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d105      	bne.n	8003e92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e86:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d11c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x186>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1d3      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4937      	ldr	r1, [pc, #220]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	e03a      	b.n	8003f4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <HAL_RCC_OscConfig+0x278>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fd facd 	bl	8001484 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fd fac9 	bl	8001484 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1b4      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f00:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4925      	ldr	r1, [pc, #148]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f22:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <HAL_RCC_OscConfig+0x278>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd faac 	bl	8001484 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fd faa8 	bl	8001484 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e193      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d036      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <HAL_RCC_OscConfig+0x27c>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7fd fa8c 	bl	8001484 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f70:	f7fd fa88 	bl	8001484 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e173      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x234>
 8003f8e:	e01b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fd fa75 	bl	8001484 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	e00e      	b.n	8003fbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fd fa71 	bl	8001484 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d907      	bls.n	8003fbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e15c      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	42470000 	.word	0x42470000
 8003fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fbc:	4b8a      	ldr	r3, [pc, #552]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8003fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1ea      	bne.n	8003f9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8097 	beq.w	8004104 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fda:	4b83      	ldr	r3, [pc, #524]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10f      	bne.n	8004006 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	4b7f      	ldr	r3, [pc, #508]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	4a7e      	ldr	r2, [pc, #504]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8003ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff6:	4b7c      	ldr	r3, [pc, #496]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004006:	4b79      	ldr	r3, [pc, #484]	; (80041ec <HAL_RCC_OscConfig+0x4b0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d118      	bne.n	8004044 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004012:	4b76      	ldr	r3, [pc, #472]	; (80041ec <HAL_RCC_OscConfig+0x4b0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a75      	ldr	r2, [pc, #468]	; (80041ec <HAL_RCC_OscConfig+0x4b0>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401e:	f7fd fa31 	bl	8001484 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fd fa2d 	bl	8001484 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e118      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004038:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <HAL_RCC_OscConfig+0x4b0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d106      	bne.n	800405a <HAL_RCC_OscConfig+0x31e>
 800404c:	4b66      	ldr	r3, [pc, #408]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	4a65      	ldr	r2, [pc, #404]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6713      	str	r3, [r2, #112]	; 0x70
 8004058:	e01c      	b.n	8004094 <HAL_RCC_OscConfig+0x358>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b05      	cmp	r3, #5
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x340>
 8004062:	4b61      	ldr	r3, [pc, #388]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a60      	ldr	r2, [pc, #384]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8004068:	f043 0304 	orr.w	r3, r3, #4
 800406c:	6713      	str	r3, [r2, #112]	; 0x70
 800406e:	4b5e      	ldr	r3, [pc, #376]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a5d      	ldr	r2, [pc, #372]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0x358>
 800407c:	4b5a      	ldr	r3, [pc, #360]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	4a59      	ldr	r2, [pc, #356]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	6713      	str	r3, [r2, #112]	; 0x70
 8004088:	4b57      	ldr	r3, [pc, #348]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a56      	ldr	r2, [pc, #344]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 800408e:	f023 0304 	bic.w	r3, r3, #4
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fd f9f2 	bl	8001484 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fd f9ee 	bl	8001484 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0d7      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ba:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ee      	beq.n	80040a4 <HAL_RCC_OscConfig+0x368>
 80040c6:	e014      	b.n	80040f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fd f9dc 	bl	8001484 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d0:	f7fd f9d8 	bl	8001484 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e0c1      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e6:	4b40      	ldr	r3, [pc, #256]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ee      	bne.n	80040d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d105      	bne.n	8004104 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	4a3a      	ldr	r2, [pc, #232]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 80040fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004102:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80ad 	beq.w	8004268 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b08      	cmp	r3, #8
 8004118:	d060      	beq.n	80041dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d145      	bne.n	80041ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004122:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <HAL_RCC_OscConfig+0x4b4>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fd f9ac 	bl	8001484 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004130:	f7fd f9a8 	bl	8001484 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e093      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	3b01      	subs	r3, #1
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	491b      	ldr	r1, [pc, #108]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <HAL_RCC_OscConfig+0x4b4>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd f97d 	bl	8001484 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418e:	f7fd f979 	bl	8001484 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e064      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x452>
 80041ac:	e05c      	b.n	8004268 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <HAL_RCC_OscConfig+0x4b4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd f966 	bl	8001484 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd f962 	bl	8001484 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04d      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x480>
 80041da:	e045      	b.n	8004268 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e040      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40007000 	.word	0x40007000
 80041f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041f4:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <HAL_RCC_OscConfig+0x538>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d030      	beq.n	8004264 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d129      	bne.n	8004264 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d122      	bne.n	8004264 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004224:	4013      	ands	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800422a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800422c:	4293      	cmp	r3, r2
 800422e:	d119      	bne.n	8004264 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	3b01      	subs	r3, #1
 800423e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d10f      	bne.n	8004264 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d107      	bne.n	8004264 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800

08004278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e03f      	b.n	800430a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fc ffc2 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2224      	movs	r2, #36	; 0x24
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f929 	bl	8004514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b08a      	sub	sp, #40	; 0x28
 8004316:	af02      	add	r7, sp, #8
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	d17c      	bne.n	800442c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_UART_Transmit+0x2c>
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e075      	b.n	800442e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_UART_Transmit+0x3e>
 800434c:	2302      	movs	r3, #2
 800434e:	e06e      	b.n	800442e <HAL_UART_Transmit+0x11c>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2221      	movs	r2, #33	; 0x21
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004366:	f7fd f88d 	bl	8001484 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	88fa      	ldrh	r2, [r7, #6]
 8004376:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004380:	d108      	bne.n	8004394 <HAL_UART_Transmit+0x82>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	e003      	b.n	800439c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043a4:	e02a      	b.n	80043fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2200      	movs	r2, #0
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f840 	bl	8004436 <UART_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e036      	b.n	800442e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10b      	bne.n	80043de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	3302      	adds	r3, #2
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	e007      	b.n	80043ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1cf      	bne.n	80043a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2140      	movs	r1, #64	; 0x40
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f810 	bl	8004436 <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e006      	b.n	800442e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b090      	sub	sp, #64	; 0x40
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	4613      	mov	r3, r2
 8004444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004446:	e050      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d04c      	beq.n	80044ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x30>
 8004456:	f7fd f815 	bl	8001484 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004462:	429a      	cmp	r2, r3
 8004464:	d241      	bcs.n	80044ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004486:	637a      	str	r2, [r7, #52]	; 0x34
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800448c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	613b      	str	r3, [r7, #16]
   return(result);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ba:	623a      	str	r2, [r7, #32]
 80044bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	69f9      	ldr	r1, [r7, #28]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e00f      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	429a      	cmp	r2, r3
 8004506:	d09f      	beq.n	8004448 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3740      	adds	r7, #64	; 0x40
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004518:	b0c0      	sub	sp, #256	; 0x100
 800451a:	af00      	add	r7, sp, #0
 800451c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	68d9      	ldr	r1, [r3, #12]
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	ea40 0301 	orr.w	r3, r0, r1
 800453c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	431a      	orrs	r2, r3
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800456c:	f021 010c 	bic.w	r1, r1, #12
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800457a:	430b      	orrs	r3, r1
 800457c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	6999      	ldr	r1, [r3, #24]
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	ea40 0301 	orr.w	r3, r0, r1
 800459a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b8f      	ldr	r3, [pc, #572]	; (80047e0 <UART_SetConfig+0x2cc>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d005      	beq.n	80045b4 <UART_SetConfig+0xa0>
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b8d      	ldr	r3, [pc, #564]	; (80047e4 <UART_SetConfig+0x2d0>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d104      	bne.n	80045be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045b4:	f7ff f97e 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 80045b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045bc:	e003      	b.n	80045c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045be:	f7ff f965 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 80045c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d0:	f040 810c 	bne.w	80047ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80045ee:	415b      	adcs	r3, r3
 80045f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045f6:	4621      	mov	r1, r4
 80045f8:	eb12 0801 	adds.w	r8, r2, r1
 80045fc:	4629      	mov	r1, r5
 80045fe:	eb43 0901 	adc.w	r9, r3, r1
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800460e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004616:	4690      	mov	r8, r2
 8004618:	4699      	mov	r9, r3
 800461a:	4623      	mov	r3, r4
 800461c:	eb18 0303 	adds.w	r3, r8, r3
 8004620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004624:	462b      	mov	r3, r5
 8004626:	eb49 0303 	adc.w	r3, r9, r3
 800462a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800463a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800463e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004642:	460b      	mov	r3, r1
 8004644:	18db      	adds	r3, r3, r3
 8004646:	653b      	str	r3, [r7, #80]	; 0x50
 8004648:	4613      	mov	r3, r2
 800464a:	eb42 0303 	adc.w	r3, r2, r3
 800464e:	657b      	str	r3, [r7, #84]	; 0x54
 8004650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004658:	f7fb fe2a 	bl	80002b0 <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4b61      	ldr	r3, [pc, #388]	; (80047e8 <UART_SetConfig+0x2d4>)
 8004662:	fba3 2302 	umull	r2, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	011c      	lsls	r4, r3, #4
 800466a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800467c:	4642      	mov	r2, r8
 800467e:	464b      	mov	r3, r9
 8004680:	1891      	adds	r1, r2, r2
 8004682:	64b9      	str	r1, [r7, #72]	; 0x48
 8004684:	415b      	adcs	r3, r3
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800468c:	4641      	mov	r1, r8
 800468e:	eb12 0a01 	adds.w	sl, r2, r1
 8004692:	4649      	mov	r1, r9
 8004694:	eb43 0b01 	adc.w	fp, r3, r1
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ac:	4692      	mov	sl, r2
 80046ae:	469b      	mov	fp, r3
 80046b0:	4643      	mov	r3, r8
 80046b2:	eb1a 0303 	adds.w	r3, sl, r3
 80046b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ba:	464b      	mov	r3, r9
 80046bc:	eb4b 0303 	adc.w	r3, fp, r3
 80046c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046d8:	460b      	mov	r3, r1
 80046da:	18db      	adds	r3, r3, r3
 80046dc:	643b      	str	r3, [r7, #64]	; 0x40
 80046de:	4613      	mov	r3, r2
 80046e0:	eb42 0303 	adc.w	r3, r2, r3
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
 80046e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046ee:	f7fb fddf 	bl	80002b0 <__aeabi_uldivmod>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	4b3b      	ldr	r3, [pc, #236]	; (80047e8 <UART_SetConfig+0x2d4>)
 80046fa:	fba3 2301 	umull	r2, r3, r3, r1
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2264      	movs	r2, #100	; 0x64
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	1acb      	subs	r3, r1, r3
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800470e:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <UART_SetConfig+0x2d4>)
 8004710:	fba3 2302 	umull	r2, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800471c:	441c      	add	r4, r3
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800472c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	1891      	adds	r1, r2, r2
 8004736:	63b9      	str	r1, [r7, #56]	; 0x38
 8004738:	415b      	adcs	r3, r3
 800473a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004740:	4641      	mov	r1, r8
 8004742:	1851      	adds	r1, r2, r1
 8004744:	6339      	str	r1, [r7, #48]	; 0x30
 8004746:	4649      	mov	r1, r9
 8004748:	414b      	adcs	r3, r1
 800474a:	637b      	str	r3, [r7, #52]	; 0x34
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004758:	4659      	mov	r1, fp
 800475a:	00cb      	lsls	r3, r1, #3
 800475c:	4651      	mov	r1, sl
 800475e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004762:	4651      	mov	r1, sl
 8004764:	00ca      	lsls	r2, r1, #3
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	4603      	mov	r3, r0
 800476c:	4642      	mov	r2, r8
 800476e:	189b      	adds	r3, r3, r2
 8004770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004774:	464b      	mov	r3, r9
 8004776:	460a      	mov	r2, r1
 8004778:	eb42 0303 	adc.w	r3, r2, r3
 800477c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800478c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004794:	460b      	mov	r3, r1
 8004796:	18db      	adds	r3, r3, r3
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
 800479a:	4613      	mov	r3, r2
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047aa:	f7fb fd81 	bl	80002b0 <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <UART_SetConfig+0x2d4>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	; 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	3332      	adds	r3, #50	; 0x32
 80047c6:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <UART_SetConfig+0x2d4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f003 0207 	and.w	r2, r3, #7
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4422      	add	r2, r4
 80047da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047dc:	e105      	b.n	80049ea <UART_SetConfig+0x4d6>
 80047de:	bf00      	nop
 80047e0:	40011000 	.word	0x40011000
 80047e4:	40011400 	.word	0x40011400
 80047e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047fe:	4642      	mov	r2, r8
 8004800:	464b      	mov	r3, r9
 8004802:	1891      	adds	r1, r2, r2
 8004804:	6239      	str	r1, [r7, #32]
 8004806:	415b      	adcs	r3, r3
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800480e:	4641      	mov	r1, r8
 8004810:	1854      	adds	r4, r2, r1
 8004812:	4649      	mov	r1, r9
 8004814:	eb43 0501 	adc.w	r5, r3, r1
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	00eb      	lsls	r3, r5, #3
 8004822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004826:	00e2      	lsls	r2, r4, #3
 8004828:	4614      	mov	r4, r2
 800482a:	461d      	mov	r5, r3
 800482c:	4643      	mov	r3, r8
 800482e:	18e3      	adds	r3, r4, r3
 8004830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004834:	464b      	mov	r3, r9
 8004836:	eb45 0303 	adc.w	r3, r5, r3
 800483a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800484a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800485a:	4629      	mov	r1, r5
 800485c:	008b      	lsls	r3, r1, #2
 800485e:	4621      	mov	r1, r4
 8004860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004864:	4621      	mov	r1, r4
 8004866:	008a      	lsls	r2, r1, #2
 8004868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800486c:	f7fb fd20 	bl	80002b0 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4b60      	ldr	r3, [pc, #384]	; (80049f8 <UART_SetConfig+0x4e4>)
 8004876:	fba3 2302 	umull	r2, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	011c      	lsls	r4, r3, #4
 800487e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800488c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	1891      	adds	r1, r2, r2
 8004896:	61b9      	str	r1, [r7, #24]
 8004898:	415b      	adcs	r3, r3
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048a0:	4641      	mov	r1, r8
 80048a2:	1851      	adds	r1, r2, r1
 80048a4:	6139      	str	r1, [r7, #16]
 80048a6:	4649      	mov	r1, r9
 80048a8:	414b      	adcs	r3, r1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048b8:	4659      	mov	r1, fp
 80048ba:	00cb      	lsls	r3, r1, #3
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c2:	4651      	mov	r1, sl
 80048c4:	00ca      	lsls	r2, r1, #3
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	4642      	mov	r2, r8
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048d4:	464b      	mov	r3, r9
 80048d6:	460a      	mov	r2, r1
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048f8:	4649      	mov	r1, r9
 80048fa:	008b      	lsls	r3, r1, #2
 80048fc:	4641      	mov	r1, r8
 80048fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004902:	4641      	mov	r1, r8
 8004904:	008a      	lsls	r2, r1, #2
 8004906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800490a:	f7fb fcd1 	bl	80002b0 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <UART_SetConfig+0x4e4>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	2164      	movs	r1, #100	; 0x64
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	3332      	adds	r3, #50	; 0x32
 8004926:	4a34      	ldr	r2, [pc, #208]	; (80049f8 <UART_SetConfig+0x4e4>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004932:	441c      	add	r4, r3
 8004934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004938:	2200      	movs	r2, #0
 800493a:	673b      	str	r3, [r7, #112]	; 0x70
 800493c:	677a      	str	r2, [r7, #116]	; 0x74
 800493e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004942:	4642      	mov	r2, r8
 8004944:	464b      	mov	r3, r9
 8004946:	1891      	adds	r1, r2, r2
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	415b      	adcs	r3, r3
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004952:	4641      	mov	r1, r8
 8004954:	1851      	adds	r1, r2, r1
 8004956:	6039      	str	r1, [r7, #0]
 8004958:	4649      	mov	r1, r9
 800495a:	414b      	adcs	r3, r1
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800496a:	4659      	mov	r1, fp
 800496c:	00cb      	lsls	r3, r1, #3
 800496e:	4651      	mov	r1, sl
 8004970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004974:	4651      	mov	r1, sl
 8004976:	00ca      	lsls	r2, r1, #3
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	4603      	mov	r3, r0
 800497e:	4642      	mov	r2, r8
 8004980:	189b      	adds	r3, r3, r2
 8004982:	66bb      	str	r3, [r7, #104]	; 0x68
 8004984:	464b      	mov	r3, r9
 8004986:	460a      	mov	r2, r1
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	663b      	str	r3, [r7, #96]	; 0x60
 8004998:	667a      	str	r2, [r7, #100]	; 0x64
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049a6:	4649      	mov	r1, r9
 80049a8:	008b      	lsls	r3, r1, #2
 80049aa:	4641      	mov	r1, r8
 80049ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b0:	4641      	mov	r1, r8
 80049b2:	008a      	lsls	r2, r1, #2
 80049b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049b8:	f7fb fc7a 	bl	80002b0 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <UART_SetConfig+0x4e4>)
 80049c2:	fba3 1302 	umull	r1, r3, r3, r2
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2164      	movs	r1, #100	; 0x64
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	3332      	adds	r3, #50	; 0x32
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <UART_SetConfig+0x4e4>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	f003 020f 	and.w	r2, r3, #15
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4422      	add	r2, r4
 80049e8:	609a      	str	r2, [r3, #8]
}
 80049ea:	bf00      	nop
 80049ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049f0:	46bd      	mov	sp, r7
 80049f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f6:	bf00      	nop
 80049f8:	51eb851f 	.word	0x51eb851f

080049fc <__errno>:
 80049fc:	4b01      	ldr	r3, [pc, #4]	; (8004a04 <__errno+0x8>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	2000000c 	.word	0x2000000c

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4d0d      	ldr	r5, [pc, #52]	; (8004a40 <__libc_init_array+0x38>)
 8004a0c:	4c0d      	ldr	r4, [pc, #52]	; (8004a44 <__libc_init_array+0x3c>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	2600      	movs	r6, #0
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	4d0b      	ldr	r5, [pc, #44]	; (8004a48 <__libc_init_array+0x40>)
 8004a1a:	4c0c      	ldr	r4, [pc, #48]	; (8004a4c <__libc_init_array+0x44>)
 8004a1c:	f001 f834 	bl	8005a88 <_init>
 8004a20:	1b64      	subs	r4, r4, r5
 8004a22:	10a4      	asrs	r4, r4, #2
 8004a24:	2600      	movs	r6, #0
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	08005d94 	.word	0x08005d94
 8004a44:	08005d94 	.word	0x08005d94
 8004a48:	08005d94 	.word	0x08005d94
 8004a4c:	08005d98 	.word	0x08005d98

08004a50 <malloc>:
 8004a50:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <malloc+0xc>)
 8004a52:	4601      	mov	r1, r0
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f000 b87f 	b.w	8004b58 <_malloc_r>
 8004a5a:	bf00      	nop
 8004a5c:	2000000c 	.word	0x2000000c

08004a60 <free>:
 8004a60:	4b02      	ldr	r3, [pc, #8]	; (8004a6c <free+0xc>)
 8004a62:	4601      	mov	r1, r0
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	f000 b80b 	b.w	8004a80 <_free_r>
 8004a6a:	bf00      	nop
 8004a6c:	2000000c 	.word	0x2000000c

08004a70 <memset>:
 8004a70:	4402      	add	r2, r0
 8004a72:	4603      	mov	r3, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <_free_r>:
 8004a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a82:	2900      	cmp	r1, #0
 8004a84:	d044      	beq.n	8004b10 <_free_r+0x90>
 8004a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a8a:	9001      	str	r0, [sp, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8004a92:	bfb8      	it	lt
 8004a94:	18e4      	addlt	r4, r4, r3
 8004a96:	f000 fc51 	bl	800533c <__malloc_lock>
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	; (8004b14 <_free_r+0x94>)
 8004a9c:	9801      	ldr	r0, [sp, #4]
 8004a9e:	6813      	ldr	r3, [r2, #0]
 8004aa0:	b933      	cbnz	r3, 8004ab0 <_free_r+0x30>
 8004aa2:	6063      	str	r3, [r4, #4]
 8004aa4:	6014      	str	r4, [r2, #0]
 8004aa6:	b003      	add	sp, #12
 8004aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004aac:	f000 bc4c 	b.w	8005348 <__malloc_unlock>
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	d908      	bls.n	8004ac6 <_free_r+0x46>
 8004ab4:	6825      	ldr	r5, [r4, #0]
 8004ab6:	1961      	adds	r1, r4, r5
 8004ab8:	428b      	cmp	r3, r1
 8004aba:	bf01      	itttt	eq
 8004abc:	6819      	ldreq	r1, [r3, #0]
 8004abe:	685b      	ldreq	r3, [r3, #4]
 8004ac0:	1949      	addeq	r1, r1, r5
 8004ac2:	6021      	streq	r1, [r4, #0]
 8004ac4:	e7ed      	b.n	8004aa2 <_free_r+0x22>
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	b10b      	cbz	r3, 8004ad0 <_free_r+0x50>
 8004acc:	42a3      	cmp	r3, r4
 8004ace:	d9fa      	bls.n	8004ac6 <_free_r+0x46>
 8004ad0:	6811      	ldr	r1, [r2, #0]
 8004ad2:	1855      	adds	r5, r2, r1
 8004ad4:	42a5      	cmp	r5, r4
 8004ad6:	d10b      	bne.n	8004af0 <_free_r+0x70>
 8004ad8:	6824      	ldr	r4, [r4, #0]
 8004ada:	4421      	add	r1, r4
 8004adc:	1854      	adds	r4, r2, r1
 8004ade:	42a3      	cmp	r3, r4
 8004ae0:	6011      	str	r1, [r2, #0]
 8004ae2:	d1e0      	bne.n	8004aa6 <_free_r+0x26>
 8004ae4:	681c      	ldr	r4, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	6053      	str	r3, [r2, #4]
 8004aea:	4421      	add	r1, r4
 8004aec:	6011      	str	r1, [r2, #0]
 8004aee:	e7da      	b.n	8004aa6 <_free_r+0x26>
 8004af0:	d902      	bls.n	8004af8 <_free_r+0x78>
 8004af2:	230c      	movs	r3, #12
 8004af4:	6003      	str	r3, [r0, #0]
 8004af6:	e7d6      	b.n	8004aa6 <_free_r+0x26>
 8004af8:	6825      	ldr	r5, [r4, #0]
 8004afa:	1961      	adds	r1, r4, r5
 8004afc:	428b      	cmp	r3, r1
 8004afe:	bf04      	itt	eq
 8004b00:	6819      	ldreq	r1, [r3, #0]
 8004b02:	685b      	ldreq	r3, [r3, #4]
 8004b04:	6063      	str	r3, [r4, #4]
 8004b06:	bf04      	itt	eq
 8004b08:	1949      	addeq	r1, r1, r5
 8004b0a:	6021      	streq	r1, [r4, #0]
 8004b0c:	6054      	str	r4, [r2, #4]
 8004b0e:	e7ca      	b.n	8004aa6 <_free_r+0x26>
 8004b10:	b003      	add	sp, #12
 8004b12:	bd30      	pop	{r4, r5, pc}
 8004b14:	20000198 	.word	0x20000198

08004b18 <sbrk_aligned>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4e0e      	ldr	r6, [pc, #56]	; (8004b54 <sbrk_aligned+0x3c>)
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	6831      	ldr	r1, [r6, #0]
 8004b20:	4605      	mov	r5, r0
 8004b22:	b911      	cbnz	r1, 8004b2a <sbrk_aligned+0x12>
 8004b24:	f000 f91a 	bl	8004d5c <_sbrk_r>
 8004b28:	6030      	str	r0, [r6, #0]
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 f915 	bl	8004d5c <_sbrk_r>
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	d00a      	beq.n	8004b4c <sbrk_aligned+0x34>
 8004b36:	1cc4      	adds	r4, r0, #3
 8004b38:	f024 0403 	bic.w	r4, r4, #3
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d007      	beq.n	8004b50 <sbrk_aligned+0x38>
 8004b40:	1a21      	subs	r1, r4, r0
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f90a 	bl	8004d5c <_sbrk_r>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d101      	bne.n	8004b50 <sbrk_aligned+0x38>
 8004b4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004b50:	4620      	mov	r0, r4
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	2000019c 	.word	0x2000019c

08004b58 <_malloc_r>:
 8004b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5c:	1ccd      	adds	r5, r1, #3
 8004b5e:	f025 0503 	bic.w	r5, r5, #3
 8004b62:	3508      	adds	r5, #8
 8004b64:	2d0c      	cmp	r5, #12
 8004b66:	bf38      	it	cc
 8004b68:	250c      	movcc	r5, #12
 8004b6a:	2d00      	cmp	r5, #0
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	db01      	blt.n	8004b74 <_malloc_r+0x1c>
 8004b70:	42a9      	cmp	r1, r5
 8004b72:	d905      	bls.n	8004b80 <_malloc_r+0x28>
 8004b74:	230c      	movs	r3, #12
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	2600      	movs	r6, #0
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b80:	4e2e      	ldr	r6, [pc, #184]	; (8004c3c <_malloc_r+0xe4>)
 8004b82:	f000 fbdb 	bl	800533c <__malloc_lock>
 8004b86:	6833      	ldr	r3, [r6, #0]
 8004b88:	461c      	mov	r4, r3
 8004b8a:	bb34      	cbnz	r4, 8004bda <_malloc_r+0x82>
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f7ff ffc2 	bl	8004b18 <sbrk_aligned>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	4604      	mov	r4, r0
 8004b98:	d14d      	bne.n	8004c36 <_malloc_r+0xde>
 8004b9a:	6834      	ldr	r4, [r6, #0]
 8004b9c:	4626      	mov	r6, r4
 8004b9e:	2e00      	cmp	r6, #0
 8004ba0:	d140      	bne.n	8004c24 <_malloc_r+0xcc>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	eb04 0803 	add.w	r8, r4, r3
 8004bac:	f000 f8d6 	bl	8004d5c <_sbrk_r>
 8004bb0:	4580      	cmp	r8, r0
 8004bb2:	d13a      	bne.n	8004c2a <_malloc_r+0xd2>
 8004bb4:	6821      	ldr	r1, [r4, #0]
 8004bb6:	3503      	adds	r5, #3
 8004bb8:	1a6d      	subs	r5, r5, r1
 8004bba:	f025 0503 	bic.w	r5, r5, #3
 8004bbe:	3508      	adds	r5, #8
 8004bc0:	2d0c      	cmp	r5, #12
 8004bc2:	bf38      	it	cc
 8004bc4:	250c      	movcc	r5, #12
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f7ff ffa5 	bl	8004b18 <sbrk_aligned>
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d02b      	beq.n	8004c2a <_malloc_r+0xd2>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	442b      	add	r3, r5
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	e00e      	b.n	8004bf8 <_malloc_r+0xa0>
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	1b52      	subs	r2, r2, r5
 8004bde:	d41e      	bmi.n	8004c1e <_malloc_r+0xc6>
 8004be0:	2a0b      	cmp	r2, #11
 8004be2:	d916      	bls.n	8004c12 <_malloc_r+0xba>
 8004be4:	1961      	adds	r1, r4, r5
 8004be6:	42a3      	cmp	r3, r4
 8004be8:	6025      	str	r5, [r4, #0]
 8004bea:	bf18      	it	ne
 8004bec:	6059      	strne	r1, [r3, #4]
 8004bee:	6863      	ldr	r3, [r4, #4]
 8004bf0:	bf08      	it	eq
 8004bf2:	6031      	streq	r1, [r6, #0]
 8004bf4:	5162      	str	r2, [r4, r5]
 8004bf6:	604b      	str	r3, [r1, #4]
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	f104 060b 	add.w	r6, r4, #11
 8004bfe:	f000 fba3 	bl	8005348 <__malloc_unlock>
 8004c02:	f026 0607 	bic.w	r6, r6, #7
 8004c06:	1d23      	adds	r3, r4, #4
 8004c08:	1af2      	subs	r2, r6, r3
 8004c0a:	d0b6      	beq.n	8004b7a <_malloc_r+0x22>
 8004c0c:	1b9b      	subs	r3, r3, r6
 8004c0e:	50a3      	str	r3, [r4, r2]
 8004c10:	e7b3      	b.n	8004b7a <_malloc_r+0x22>
 8004c12:	6862      	ldr	r2, [r4, #4]
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	bf0c      	ite	eq
 8004c18:	6032      	streq	r2, [r6, #0]
 8004c1a:	605a      	strne	r2, [r3, #4]
 8004c1c:	e7ec      	b.n	8004bf8 <_malloc_r+0xa0>
 8004c1e:	4623      	mov	r3, r4
 8004c20:	6864      	ldr	r4, [r4, #4]
 8004c22:	e7b2      	b.n	8004b8a <_malloc_r+0x32>
 8004c24:	4634      	mov	r4, r6
 8004c26:	6876      	ldr	r6, [r6, #4]
 8004c28:	e7b9      	b.n	8004b9e <_malloc_r+0x46>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f000 fb8a 	bl	8005348 <__malloc_unlock>
 8004c34:	e7a1      	b.n	8004b7a <_malloc_r+0x22>
 8004c36:	6025      	str	r5, [r4, #0]
 8004c38:	e7de      	b.n	8004bf8 <_malloc_r+0xa0>
 8004c3a:	bf00      	nop
 8004c3c:	20000198 	.word	0x20000198

08004c40 <iprintf>:
 8004c40:	b40f      	push	{r0, r1, r2, r3}
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <iprintf+0x2c>)
 8004c44:	b513      	push	{r0, r1, r4, lr}
 8004c46:	681c      	ldr	r4, [r3, #0]
 8004c48:	b124      	cbz	r4, 8004c54 <iprintf+0x14>
 8004c4a:	69a3      	ldr	r3, [r4, #24]
 8004c4c:	b913      	cbnz	r3, 8004c54 <iprintf+0x14>
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f000 fa6e 	bl	8005130 <__sinit>
 8004c54:	ab05      	add	r3, sp, #20
 8004c56:	9a04      	ldr	r2, [sp, #16]
 8004c58:	68a1      	ldr	r1, [r4, #8]
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 fba3 	bl	80053a8 <_vfiprintf_r>
 8004c62:	b002      	add	sp, #8
 8004c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c68:	b004      	add	sp, #16
 8004c6a:	4770      	bx	lr
 8004c6c:	2000000c 	.word	0x2000000c

08004c70 <_puts_r>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	460e      	mov	r6, r1
 8004c74:	4605      	mov	r5, r0
 8004c76:	b118      	cbz	r0, 8004c80 <_puts_r+0x10>
 8004c78:	6983      	ldr	r3, [r0, #24]
 8004c7a:	b90b      	cbnz	r3, 8004c80 <_puts_r+0x10>
 8004c7c:	f000 fa58 	bl	8005130 <__sinit>
 8004c80:	69ab      	ldr	r3, [r5, #24]
 8004c82:	68ac      	ldr	r4, [r5, #8]
 8004c84:	b913      	cbnz	r3, 8004c8c <_puts_r+0x1c>
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 fa52 	bl	8005130 <__sinit>
 8004c8c:	4b2c      	ldr	r3, [pc, #176]	; (8004d40 <_puts_r+0xd0>)
 8004c8e:	429c      	cmp	r4, r3
 8004c90:	d120      	bne.n	8004cd4 <_puts_r+0x64>
 8004c92:	686c      	ldr	r4, [r5, #4]
 8004c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c96:	07db      	lsls	r3, r3, #31
 8004c98:	d405      	bmi.n	8004ca6 <_puts_r+0x36>
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	0598      	lsls	r0, r3, #22
 8004c9e:	d402      	bmi.n	8004ca6 <_puts_r+0x36>
 8004ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca2:	f000 fae3 	bl	800526c <__retarget_lock_acquire_recursive>
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	0719      	lsls	r1, r3, #28
 8004caa:	d51d      	bpl.n	8004ce8 <_puts_r+0x78>
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	b1db      	cbz	r3, 8004ce8 <_puts_r+0x78>
 8004cb0:	3e01      	subs	r6, #1
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	60a3      	str	r3, [r4, #8]
 8004cbc:	bb39      	cbnz	r1, 8004d0e <_puts_r+0x9e>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da38      	bge.n	8004d34 <_puts_r+0xc4>
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	210a      	movs	r1, #10
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 f858 	bl	8004d7c <__swbuf_r>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d011      	beq.n	8004cf4 <_puts_r+0x84>
 8004cd0:	250a      	movs	r5, #10
 8004cd2:	e011      	b.n	8004cf8 <_puts_r+0x88>
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <_puts_r+0xd4>)
 8004cd6:	429c      	cmp	r4, r3
 8004cd8:	d101      	bne.n	8004cde <_puts_r+0x6e>
 8004cda:	68ac      	ldr	r4, [r5, #8]
 8004cdc:	e7da      	b.n	8004c94 <_puts_r+0x24>
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <_puts_r+0xd8>)
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	bf08      	it	eq
 8004ce4:	68ec      	ldreq	r4, [r5, #12]
 8004ce6:	e7d5      	b.n	8004c94 <_puts_r+0x24>
 8004ce8:	4621      	mov	r1, r4
 8004cea:	4628      	mov	r0, r5
 8004cec:	f000 f898 	bl	8004e20 <__swsetup_r>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d0dd      	beq.n	8004cb0 <_puts_r+0x40>
 8004cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8004cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cfa:	07da      	lsls	r2, r3, #31
 8004cfc:	d405      	bmi.n	8004d0a <_puts_r+0x9a>
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	059b      	lsls	r3, r3, #22
 8004d02:	d402      	bmi.n	8004d0a <_puts_r+0x9a>
 8004d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d06:	f000 fab2 	bl	800526e <__retarget_lock_release_recursive>
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	bd70      	pop	{r4, r5, r6, pc}
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da04      	bge.n	8004d1c <_puts_r+0xac>
 8004d12:	69a2      	ldr	r2, [r4, #24]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	dc06      	bgt.n	8004d26 <_puts_r+0xb6>
 8004d18:	290a      	cmp	r1, #10
 8004d1a:	d004      	beq.n	8004d26 <_puts_r+0xb6>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	6022      	str	r2, [r4, #0]
 8004d22:	7019      	strb	r1, [r3, #0]
 8004d24:	e7c5      	b.n	8004cb2 <_puts_r+0x42>
 8004d26:	4622      	mov	r2, r4
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f000 f827 	bl	8004d7c <__swbuf_r>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d1bf      	bne.n	8004cb2 <_puts_r+0x42>
 8004d32:	e7df      	b.n	8004cf4 <_puts_r+0x84>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	250a      	movs	r5, #10
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	6022      	str	r2, [r4, #0]
 8004d3c:	701d      	strb	r5, [r3, #0]
 8004d3e:	e7db      	b.n	8004cf8 <_puts_r+0x88>
 8004d40:	08005d18 	.word	0x08005d18
 8004d44:	08005d38 	.word	0x08005d38
 8004d48:	08005cf8 	.word	0x08005cf8

08004d4c <puts>:
 8004d4c:	4b02      	ldr	r3, [pc, #8]	; (8004d58 <puts+0xc>)
 8004d4e:	4601      	mov	r1, r0
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	f7ff bf8d 	b.w	8004c70 <_puts_r>
 8004d56:	bf00      	nop
 8004d58:	2000000c 	.word	0x2000000c

08004d5c <_sbrk_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d06      	ldr	r5, [pc, #24]	; (8004d78 <_sbrk_r+0x1c>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	f7fc f9c2 	bl	80010f0 <_sbrk>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_sbrk_r+0x1a>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_sbrk_r+0x1a>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	200001a4 	.word	0x200001a4

08004d7c <__swbuf_r>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	460e      	mov	r6, r1
 8004d80:	4614      	mov	r4, r2
 8004d82:	4605      	mov	r5, r0
 8004d84:	b118      	cbz	r0, 8004d8e <__swbuf_r+0x12>
 8004d86:	6983      	ldr	r3, [r0, #24]
 8004d88:	b90b      	cbnz	r3, 8004d8e <__swbuf_r+0x12>
 8004d8a:	f000 f9d1 	bl	8005130 <__sinit>
 8004d8e:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <__swbuf_r+0x98>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	d12b      	bne.n	8004dec <__swbuf_r+0x70>
 8004d94:	686c      	ldr	r4, [r5, #4]
 8004d96:	69a3      	ldr	r3, [r4, #24]
 8004d98:	60a3      	str	r3, [r4, #8]
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	071a      	lsls	r2, r3, #28
 8004d9e:	d52f      	bpl.n	8004e00 <__swbuf_r+0x84>
 8004da0:	6923      	ldr	r3, [r4, #16]
 8004da2:	b36b      	cbz	r3, 8004e00 <__swbuf_r+0x84>
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	1ac0      	subs	r0, r0, r3
 8004daa:	6963      	ldr	r3, [r4, #20]
 8004dac:	b2f6      	uxtb	r6, r6
 8004dae:	4283      	cmp	r3, r0
 8004db0:	4637      	mov	r7, r6
 8004db2:	dc04      	bgt.n	8004dbe <__swbuf_r+0x42>
 8004db4:	4621      	mov	r1, r4
 8004db6:	4628      	mov	r0, r5
 8004db8:	f000 f926 	bl	8005008 <_fflush_r>
 8004dbc:	bb30      	cbnz	r0, 8004e0c <__swbuf_r+0x90>
 8004dbe:	68a3      	ldr	r3, [r4, #8]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	60a3      	str	r3, [r4, #8]
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	6022      	str	r2, [r4, #0]
 8004dca:	701e      	strb	r6, [r3, #0]
 8004dcc:	6963      	ldr	r3, [r4, #20]
 8004dce:	3001      	adds	r0, #1
 8004dd0:	4283      	cmp	r3, r0
 8004dd2:	d004      	beq.n	8004dde <__swbuf_r+0x62>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	07db      	lsls	r3, r3, #31
 8004dd8:	d506      	bpl.n	8004de8 <__swbuf_r+0x6c>
 8004dda:	2e0a      	cmp	r6, #10
 8004ddc:	d104      	bne.n	8004de8 <__swbuf_r+0x6c>
 8004dde:	4621      	mov	r1, r4
 8004de0:	4628      	mov	r0, r5
 8004de2:	f000 f911 	bl	8005008 <_fflush_r>
 8004de6:	b988      	cbnz	r0, 8004e0c <__swbuf_r+0x90>
 8004de8:	4638      	mov	r0, r7
 8004dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dec:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <__swbuf_r+0x9c>)
 8004dee:	429c      	cmp	r4, r3
 8004df0:	d101      	bne.n	8004df6 <__swbuf_r+0x7a>
 8004df2:	68ac      	ldr	r4, [r5, #8]
 8004df4:	e7cf      	b.n	8004d96 <__swbuf_r+0x1a>
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <__swbuf_r+0xa0>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	bf08      	it	eq
 8004dfc:	68ec      	ldreq	r4, [r5, #12]
 8004dfe:	e7ca      	b.n	8004d96 <__swbuf_r+0x1a>
 8004e00:	4621      	mov	r1, r4
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 f80c 	bl	8004e20 <__swsetup_r>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d0cb      	beq.n	8004da4 <__swbuf_r+0x28>
 8004e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e10:	e7ea      	b.n	8004de8 <__swbuf_r+0x6c>
 8004e12:	bf00      	nop
 8004e14:	08005d18 	.word	0x08005d18
 8004e18:	08005d38 	.word	0x08005d38
 8004e1c:	08005cf8 	.word	0x08005cf8

08004e20 <__swsetup_r>:
 8004e20:	4b32      	ldr	r3, [pc, #200]	; (8004eec <__swsetup_r+0xcc>)
 8004e22:	b570      	push	{r4, r5, r6, lr}
 8004e24:	681d      	ldr	r5, [r3, #0]
 8004e26:	4606      	mov	r6, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	b125      	cbz	r5, 8004e36 <__swsetup_r+0x16>
 8004e2c:	69ab      	ldr	r3, [r5, #24]
 8004e2e:	b913      	cbnz	r3, 8004e36 <__swsetup_r+0x16>
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 f97d 	bl	8005130 <__sinit>
 8004e36:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <__swsetup_r+0xd0>)
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	d10f      	bne.n	8004e5c <__swsetup_r+0x3c>
 8004e3c:	686c      	ldr	r4, [r5, #4]
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e44:	0719      	lsls	r1, r3, #28
 8004e46:	d42c      	bmi.n	8004ea2 <__swsetup_r+0x82>
 8004e48:	06dd      	lsls	r5, r3, #27
 8004e4a:	d411      	bmi.n	8004e70 <__swsetup_r+0x50>
 8004e4c:	2309      	movs	r3, #9
 8004e4e:	6033      	str	r3, [r6, #0]
 8004e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e54:	81a3      	strh	r3, [r4, #12]
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5a:	e03e      	b.n	8004eda <__swsetup_r+0xba>
 8004e5c:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <__swsetup_r+0xd4>)
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d101      	bne.n	8004e66 <__swsetup_r+0x46>
 8004e62:	68ac      	ldr	r4, [r5, #8]
 8004e64:	e7eb      	b.n	8004e3e <__swsetup_r+0x1e>
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <__swsetup_r+0xd8>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	bf08      	it	eq
 8004e6c:	68ec      	ldreq	r4, [r5, #12]
 8004e6e:	e7e6      	b.n	8004e3e <__swsetup_r+0x1e>
 8004e70:	0758      	lsls	r0, r3, #29
 8004e72:	d512      	bpl.n	8004e9a <__swsetup_r+0x7a>
 8004e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e76:	b141      	cbz	r1, 8004e8a <__swsetup_r+0x6a>
 8004e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	d002      	beq.n	8004e86 <__swsetup_r+0x66>
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff fdfd 	bl	8004a80 <_free_r>
 8004e86:	2300      	movs	r3, #0
 8004e88:	6363      	str	r3, [r4, #52]	; 0x34
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	2300      	movs	r3, #0
 8004e94:	6063      	str	r3, [r4, #4]
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	f043 0308 	orr.w	r3, r3, #8
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	b94b      	cbnz	r3, 8004eba <__swsetup_r+0x9a>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb0:	d003      	beq.n	8004eba <__swsetup_r+0x9a>
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	f000 fa01 	bl	80052bc <__smakebuf_r>
 8004eba:	89a0      	ldrh	r0, [r4, #12]
 8004ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ec0:	f010 0301 	ands.w	r3, r0, #1
 8004ec4:	d00a      	beq.n	8004edc <__swsetup_r+0xbc>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60a3      	str	r3, [r4, #8]
 8004eca:	6963      	ldr	r3, [r4, #20]
 8004ecc:	425b      	negs	r3, r3
 8004ece:	61a3      	str	r3, [r4, #24]
 8004ed0:	6923      	ldr	r3, [r4, #16]
 8004ed2:	b943      	cbnz	r3, 8004ee6 <__swsetup_r+0xc6>
 8004ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ed8:	d1ba      	bne.n	8004e50 <__swsetup_r+0x30>
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	0781      	lsls	r1, r0, #30
 8004ede:	bf58      	it	pl
 8004ee0:	6963      	ldrpl	r3, [r4, #20]
 8004ee2:	60a3      	str	r3, [r4, #8]
 8004ee4:	e7f4      	b.n	8004ed0 <__swsetup_r+0xb0>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e7f7      	b.n	8004eda <__swsetup_r+0xba>
 8004eea:	bf00      	nop
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	08005d18 	.word	0x08005d18
 8004ef4:	08005d38 	.word	0x08005d38
 8004ef8:	08005cf8 	.word	0x08005cf8

08004efc <__sflush_r>:
 8004efc:	898a      	ldrh	r2, [r1, #12]
 8004efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	4605      	mov	r5, r0
 8004f04:	0710      	lsls	r0, r2, #28
 8004f06:	460c      	mov	r4, r1
 8004f08:	d458      	bmi.n	8004fbc <__sflush_r+0xc0>
 8004f0a:	684b      	ldr	r3, [r1, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dc05      	bgt.n	8004f1c <__sflush_r+0x20>
 8004f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc02      	bgt.n	8004f1c <__sflush_r+0x20>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	d0f9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004f22:	2300      	movs	r3, #0
 8004f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f28:	682f      	ldr	r7, [r5, #0]
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	d032      	beq.n	8004f94 <__sflush_r+0x98>
 8004f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	075a      	lsls	r2, r3, #29
 8004f34:	d505      	bpl.n	8004f42 <__sflush_r+0x46>
 8004f36:	6863      	ldr	r3, [r4, #4]
 8004f38:	1ac0      	subs	r0, r0, r3
 8004f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f3c:	b10b      	cbz	r3, 8004f42 <__sflush_r+0x46>
 8004f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f40:	1ac0      	subs	r0, r0, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	4602      	mov	r2, r0
 8004f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f48:	6a21      	ldr	r1, [r4, #32]
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b0      	blx	r6
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	d106      	bne.n	8004f62 <__sflush_r+0x66>
 8004f54:	6829      	ldr	r1, [r5, #0]
 8004f56:	291d      	cmp	r1, #29
 8004f58:	d82c      	bhi.n	8004fb4 <__sflush_r+0xb8>
 8004f5a:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <__sflush_r+0x108>)
 8004f5c:	40ca      	lsrs	r2, r1
 8004f5e:	07d6      	lsls	r6, r2, #31
 8004f60:	d528      	bpl.n	8004fb4 <__sflush_r+0xb8>
 8004f62:	2200      	movs	r2, #0
 8004f64:	6062      	str	r2, [r4, #4]
 8004f66:	04d9      	lsls	r1, r3, #19
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	6022      	str	r2, [r4, #0]
 8004f6c:	d504      	bpl.n	8004f78 <__sflush_r+0x7c>
 8004f6e:	1c42      	adds	r2, r0, #1
 8004f70:	d101      	bne.n	8004f76 <__sflush_r+0x7a>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	b903      	cbnz	r3, 8004f78 <__sflush_r+0x7c>
 8004f76:	6560      	str	r0, [r4, #84]	; 0x54
 8004f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7a:	602f      	str	r7, [r5, #0]
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d0ca      	beq.n	8004f16 <__sflush_r+0x1a>
 8004f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f84:	4299      	cmp	r1, r3
 8004f86:	d002      	beq.n	8004f8e <__sflush_r+0x92>
 8004f88:	4628      	mov	r0, r5
 8004f8a:	f7ff fd79 	bl	8004a80 <_free_r>
 8004f8e:	2000      	movs	r0, #0
 8004f90:	6360      	str	r0, [r4, #52]	; 0x34
 8004f92:	e7c1      	b.n	8004f18 <__sflush_r+0x1c>
 8004f94:	6a21      	ldr	r1, [r4, #32]
 8004f96:	2301      	movs	r3, #1
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b0      	blx	r6
 8004f9c:	1c41      	adds	r1, r0, #1
 8004f9e:	d1c7      	bne.n	8004f30 <__sflush_r+0x34>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0c4      	beq.n	8004f30 <__sflush_r+0x34>
 8004fa6:	2b1d      	cmp	r3, #29
 8004fa8:	d001      	beq.n	8004fae <__sflush_r+0xb2>
 8004faa:	2b16      	cmp	r3, #22
 8004fac:	d101      	bne.n	8004fb2 <__sflush_r+0xb6>
 8004fae:	602f      	str	r7, [r5, #0]
 8004fb0:	e7b1      	b.n	8004f16 <__sflush_r+0x1a>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	e7ad      	b.n	8004f18 <__sflush_r+0x1c>
 8004fbc:	690f      	ldr	r7, [r1, #16]
 8004fbe:	2f00      	cmp	r7, #0
 8004fc0:	d0a9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004fc2:	0793      	lsls	r3, r2, #30
 8004fc4:	680e      	ldr	r6, [r1, #0]
 8004fc6:	bf08      	it	eq
 8004fc8:	694b      	ldreq	r3, [r1, #20]
 8004fca:	600f      	str	r7, [r1, #0]
 8004fcc:	bf18      	it	ne
 8004fce:	2300      	movne	r3, #0
 8004fd0:	eba6 0807 	sub.w	r8, r6, r7
 8004fd4:	608b      	str	r3, [r1, #8]
 8004fd6:	f1b8 0f00 	cmp.w	r8, #0
 8004fda:	dd9c      	ble.n	8004f16 <__sflush_r+0x1a>
 8004fdc:	6a21      	ldr	r1, [r4, #32]
 8004fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fe0:	4643      	mov	r3, r8
 8004fe2:	463a      	mov	r2, r7
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b0      	blx	r6
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	dc06      	bgt.n	8004ffa <__sflush_r+0xfe>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	e78e      	b.n	8004f18 <__sflush_r+0x1c>
 8004ffa:	4407      	add	r7, r0
 8004ffc:	eba8 0800 	sub.w	r8, r8, r0
 8005000:	e7e9      	b.n	8004fd6 <__sflush_r+0xda>
 8005002:	bf00      	nop
 8005004:	20400001 	.word	0x20400001

08005008 <_fflush_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	4605      	mov	r5, r0
 800500e:	460c      	mov	r4, r1
 8005010:	b913      	cbnz	r3, 8005018 <_fflush_r+0x10>
 8005012:	2500      	movs	r5, #0
 8005014:	4628      	mov	r0, r5
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	b118      	cbz	r0, 8005022 <_fflush_r+0x1a>
 800501a:	6983      	ldr	r3, [r0, #24]
 800501c:	b90b      	cbnz	r3, 8005022 <_fflush_r+0x1a>
 800501e:	f000 f887 	bl	8005130 <__sinit>
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <_fflush_r+0x6c>)
 8005024:	429c      	cmp	r4, r3
 8005026:	d11b      	bne.n	8005060 <_fflush_r+0x58>
 8005028:	686c      	ldr	r4, [r5, #4]
 800502a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ef      	beq.n	8005012 <_fflush_r+0xa>
 8005032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005034:	07d0      	lsls	r0, r2, #31
 8005036:	d404      	bmi.n	8005042 <_fflush_r+0x3a>
 8005038:	0599      	lsls	r1, r3, #22
 800503a:	d402      	bmi.n	8005042 <_fflush_r+0x3a>
 800503c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503e:	f000 f915 	bl	800526c <__retarget_lock_acquire_recursive>
 8005042:	4628      	mov	r0, r5
 8005044:	4621      	mov	r1, r4
 8005046:	f7ff ff59 	bl	8004efc <__sflush_r>
 800504a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800504c:	07da      	lsls	r2, r3, #31
 800504e:	4605      	mov	r5, r0
 8005050:	d4e0      	bmi.n	8005014 <_fflush_r+0xc>
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	059b      	lsls	r3, r3, #22
 8005056:	d4dd      	bmi.n	8005014 <_fflush_r+0xc>
 8005058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800505a:	f000 f908 	bl	800526e <__retarget_lock_release_recursive>
 800505e:	e7d9      	b.n	8005014 <_fflush_r+0xc>
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <_fflush_r+0x70>)
 8005062:	429c      	cmp	r4, r3
 8005064:	d101      	bne.n	800506a <_fflush_r+0x62>
 8005066:	68ac      	ldr	r4, [r5, #8]
 8005068:	e7df      	b.n	800502a <_fflush_r+0x22>
 800506a:	4b04      	ldr	r3, [pc, #16]	; (800507c <_fflush_r+0x74>)
 800506c:	429c      	cmp	r4, r3
 800506e:	bf08      	it	eq
 8005070:	68ec      	ldreq	r4, [r5, #12]
 8005072:	e7da      	b.n	800502a <_fflush_r+0x22>
 8005074:	08005d18 	.word	0x08005d18
 8005078:	08005d38 	.word	0x08005d38
 800507c:	08005cf8 	.word	0x08005cf8

08005080 <std>:
 8005080:	2300      	movs	r3, #0
 8005082:	b510      	push	{r4, lr}
 8005084:	4604      	mov	r4, r0
 8005086:	e9c0 3300 	strd	r3, r3, [r0]
 800508a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800508e:	6083      	str	r3, [r0, #8]
 8005090:	8181      	strh	r1, [r0, #12]
 8005092:	6643      	str	r3, [r0, #100]	; 0x64
 8005094:	81c2      	strh	r2, [r0, #14]
 8005096:	6183      	str	r3, [r0, #24]
 8005098:	4619      	mov	r1, r3
 800509a:	2208      	movs	r2, #8
 800509c:	305c      	adds	r0, #92	; 0x5c
 800509e:	f7ff fce7 	bl	8004a70 <memset>
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <std+0x38>)
 80050a4:	6263      	str	r3, [r4, #36]	; 0x24
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <std+0x3c>)
 80050a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <std+0x40>)
 80050ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <std+0x44>)
 80050b0:	6224      	str	r4, [r4, #32]
 80050b2:	6323      	str	r3, [r4, #48]	; 0x30
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	bf00      	nop
 80050b8:	08005931 	.word	0x08005931
 80050bc:	08005953 	.word	0x08005953
 80050c0:	0800598b 	.word	0x0800598b
 80050c4:	080059af 	.word	0x080059af

080050c8 <_cleanup_r>:
 80050c8:	4901      	ldr	r1, [pc, #4]	; (80050d0 <_cleanup_r+0x8>)
 80050ca:	f000 b8af 	b.w	800522c <_fwalk_reent>
 80050ce:	bf00      	nop
 80050d0:	08005009 	.word	0x08005009

080050d4 <__sfmoreglue>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	2268      	movs	r2, #104	; 0x68
 80050d8:	1e4d      	subs	r5, r1, #1
 80050da:	4355      	muls	r5, r2
 80050dc:	460e      	mov	r6, r1
 80050de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050e2:	f7ff fd39 	bl	8004b58 <_malloc_r>
 80050e6:	4604      	mov	r4, r0
 80050e8:	b140      	cbz	r0, 80050fc <__sfmoreglue+0x28>
 80050ea:	2100      	movs	r1, #0
 80050ec:	e9c0 1600 	strd	r1, r6, [r0]
 80050f0:	300c      	adds	r0, #12
 80050f2:	60a0      	str	r0, [r4, #8]
 80050f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050f8:	f7ff fcba 	bl	8004a70 <memset>
 80050fc:	4620      	mov	r0, r4
 80050fe:	bd70      	pop	{r4, r5, r6, pc}

08005100 <__sfp_lock_acquire>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__sfp_lock_acquire+0x8>)
 8005102:	f000 b8b3 	b.w	800526c <__retarget_lock_acquire_recursive>
 8005106:	bf00      	nop
 8005108:	200001a1 	.word	0x200001a1

0800510c <__sfp_lock_release>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__sfp_lock_release+0x8>)
 800510e:	f000 b8ae 	b.w	800526e <__retarget_lock_release_recursive>
 8005112:	bf00      	nop
 8005114:	200001a1 	.word	0x200001a1

08005118 <__sinit_lock_acquire>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__sinit_lock_acquire+0x8>)
 800511a:	f000 b8a7 	b.w	800526c <__retarget_lock_acquire_recursive>
 800511e:	bf00      	nop
 8005120:	200001a2 	.word	0x200001a2

08005124 <__sinit_lock_release>:
 8005124:	4801      	ldr	r0, [pc, #4]	; (800512c <__sinit_lock_release+0x8>)
 8005126:	f000 b8a2 	b.w	800526e <__retarget_lock_release_recursive>
 800512a:	bf00      	nop
 800512c:	200001a2 	.word	0x200001a2

08005130 <__sinit>:
 8005130:	b510      	push	{r4, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	f7ff fff0 	bl	8005118 <__sinit_lock_acquire>
 8005138:	69a3      	ldr	r3, [r4, #24]
 800513a:	b11b      	cbz	r3, 8005144 <__sinit+0x14>
 800513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005140:	f7ff bff0 	b.w	8005124 <__sinit_lock_release>
 8005144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005148:	6523      	str	r3, [r4, #80]	; 0x50
 800514a:	4b13      	ldr	r3, [pc, #76]	; (8005198 <__sinit+0x68>)
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <__sinit+0x6c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	62a2      	str	r2, [r4, #40]	; 0x28
 8005152:	42a3      	cmp	r3, r4
 8005154:	bf04      	itt	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	61a3      	streq	r3, [r4, #24]
 800515a:	4620      	mov	r0, r4
 800515c:	f000 f820 	bl	80051a0 <__sfp>
 8005160:	6060      	str	r0, [r4, #4]
 8005162:	4620      	mov	r0, r4
 8005164:	f000 f81c 	bl	80051a0 <__sfp>
 8005168:	60a0      	str	r0, [r4, #8]
 800516a:	4620      	mov	r0, r4
 800516c:	f000 f818 	bl	80051a0 <__sfp>
 8005170:	2200      	movs	r2, #0
 8005172:	60e0      	str	r0, [r4, #12]
 8005174:	2104      	movs	r1, #4
 8005176:	6860      	ldr	r0, [r4, #4]
 8005178:	f7ff ff82 	bl	8005080 <std>
 800517c:	68a0      	ldr	r0, [r4, #8]
 800517e:	2201      	movs	r2, #1
 8005180:	2109      	movs	r1, #9
 8005182:	f7ff ff7d 	bl	8005080 <std>
 8005186:	68e0      	ldr	r0, [r4, #12]
 8005188:	2202      	movs	r2, #2
 800518a:	2112      	movs	r1, #18
 800518c:	f7ff ff78 	bl	8005080 <std>
 8005190:	2301      	movs	r3, #1
 8005192:	61a3      	str	r3, [r4, #24]
 8005194:	e7d2      	b.n	800513c <__sinit+0xc>
 8005196:	bf00      	nop
 8005198:	08005cf4 	.word	0x08005cf4
 800519c:	080050c9 	.word	0x080050c9

080051a0 <__sfp>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	4607      	mov	r7, r0
 80051a4:	f7ff ffac 	bl	8005100 <__sfp_lock_acquire>
 80051a8:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <__sfp+0x84>)
 80051aa:	681e      	ldr	r6, [r3, #0]
 80051ac:	69b3      	ldr	r3, [r6, #24]
 80051ae:	b913      	cbnz	r3, 80051b6 <__sfp+0x16>
 80051b0:	4630      	mov	r0, r6
 80051b2:	f7ff ffbd 	bl	8005130 <__sinit>
 80051b6:	3648      	adds	r6, #72	; 0x48
 80051b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051bc:	3b01      	subs	r3, #1
 80051be:	d503      	bpl.n	80051c8 <__sfp+0x28>
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	b30b      	cbz	r3, 8005208 <__sfp+0x68>
 80051c4:	6836      	ldr	r6, [r6, #0]
 80051c6:	e7f7      	b.n	80051b8 <__sfp+0x18>
 80051c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051cc:	b9d5      	cbnz	r5, 8005204 <__sfp+0x64>
 80051ce:	4b16      	ldr	r3, [pc, #88]	; (8005228 <__sfp+0x88>)
 80051d0:	60e3      	str	r3, [r4, #12]
 80051d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051d6:	6665      	str	r5, [r4, #100]	; 0x64
 80051d8:	f000 f847 	bl	800526a <__retarget_lock_init_recursive>
 80051dc:	f7ff ff96 	bl	800510c <__sfp_lock_release>
 80051e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051e8:	6025      	str	r5, [r4, #0]
 80051ea:	61a5      	str	r5, [r4, #24]
 80051ec:	2208      	movs	r2, #8
 80051ee:	4629      	mov	r1, r5
 80051f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051f4:	f7ff fc3c 	bl	8004a70 <memset>
 80051f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005200:	4620      	mov	r0, r4
 8005202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005204:	3468      	adds	r4, #104	; 0x68
 8005206:	e7d9      	b.n	80051bc <__sfp+0x1c>
 8005208:	2104      	movs	r1, #4
 800520a:	4638      	mov	r0, r7
 800520c:	f7ff ff62 	bl	80050d4 <__sfmoreglue>
 8005210:	4604      	mov	r4, r0
 8005212:	6030      	str	r0, [r6, #0]
 8005214:	2800      	cmp	r0, #0
 8005216:	d1d5      	bne.n	80051c4 <__sfp+0x24>
 8005218:	f7ff ff78 	bl	800510c <__sfp_lock_release>
 800521c:	230c      	movs	r3, #12
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	e7ee      	b.n	8005200 <__sfp+0x60>
 8005222:	bf00      	nop
 8005224:	08005cf4 	.word	0x08005cf4
 8005228:	ffff0001 	.word	0xffff0001

0800522c <_fwalk_reent>:
 800522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005230:	4606      	mov	r6, r0
 8005232:	4688      	mov	r8, r1
 8005234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005238:	2700      	movs	r7, #0
 800523a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800523e:	f1b9 0901 	subs.w	r9, r9, #1
 8005242:	d505      	bpl.n	8005250 <_fwalk_reent+0x24>
 8005244:	6824      	ldr	r4, [r4, #0]
 8005246:	2c00      	cmp	r4, #0
 8005248:	d1f7      	bne.n	800523a <_fwalk_reent+0xe>
 800524a:	4638      	mov	r0, r7
 800524c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005250:	89ab      	ldrh	r3, [r5, #12]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d907      	bls.n	8005266 <_fwalk_reent+0x3a>
 8005256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800525a:	3301      	adds	r3, #1
 800525c:	d003      	beq.n	8005266 <_fwalk_reent+0x3a>
 800525e:	4629      	mov	r1, r5
 8005260:	4630      	mov	r0, r6
 8005262:	47c0      	blx	r8
 8005264:	4307      	orrs	r7, r0
 8005266:	3568      	adds	r5, #104	; 0x68
 8005268:	e7e9      	b.n	800523e <_fwalk_reent+0x12>

0800526a <__retarget_lock_init_recursive>:
 800526a:	4770      	bx	lr

0800526c <__retarget_lock_acquire_recursive>:
 800526c:	4770      	bx	lr

0800526e <__retarget_lock_release_recursive>:
 800526e:	4770      	bx	lr

08005270 <__swhatbuf_r>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	460e      	mov	r6, r1
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	2900      	cmp	r1, #0
 800527a:	b096      	sub	sp, #88	; 0x58
 800527c:	4614      	mov	r4, r2
 800527e:	461d      	mov	r5, r3
 8005280:	da08      	bge.n	8005294 <__swhatbuf_r+0x24>
 8005282:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	602a      	str	r2, [r5, #0]
 800528a:	061a      	lsls	r2, r3, #24
 800528c:	d410      	bmi.n	80052b0 <__swhatbuf_r+0x40>
 800528e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005292:	e00e      	b.n	80052b2 <__swhatbuf_r+0x42>
 8005294:	466a      	mov	r2, sp
 8005296:	f000 fbb1 	bl	80059fc <_fstat_r>
 800529a:	2800      	cmp	r0, #0
 800529c:	dbf1      	blt.n	8005282 <__swhatbuf_r+0x12>
 800529e:	9a01      	ldr	r2, [sp, #4]
 80052a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052a8:	425a      	negs	r2, r3
 80052aa:	415a      	adcs	r2, r3
 80052ac:	602a      	str	r2, [r5, #0]
 80052ae:	e7ee      	b.n	800528e <__swhatbuf_r+0x1e>
 80052b0:	2340      	movs	r3, #64	; 0x40
 80052b2:	2000      	movs	r0, #0
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	b016      	add	sp, #88	; 0x58
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052bc <__smakebuf_r>:
 80052bc:	898b      	ldrh	r3, [r1, #12]
 80052be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052c0:	079d      	lsls	r5, r3, #30
 80052c2:	4606      	mov	r6, r0
 80052c4:	460c      	mov	r4, r1
 80052c6:	d507      	bpl.n	80052d8 <__smakebuf_r+0x1c>
 80052c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	2301      	movs	r3, #1
 80052d2:	6163      	str	r3, [r4, #20]
 80052d4:	b002      	add	sp, #8
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	ab01      	add	r3, sp, #4
 80052da:	466a      	mov	r2, sp
 80052dc:	f7ff ffc8 	bl	8005270 <__swhatbuf_r>
 80052e0:	9900      	ldr	r1, [sp, #0]
 80052e2:	4605      	mov	r5, r0
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff fc37 	bl	8004b58 <_malloc_r>
 80052ea:	b948      	cbnz	r0, 8005300 <__smakebuf_r+0x44>
 80052ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f0:	059a      	lsls	r2, r3, #22
 80052f2:	d4ef      	bmi.n	80052d4 <__smakebuf_r+0x18>
 80052f4:	f023 0303 	bic.w	r3, r3, #3
 80052f8:	f043 0302 	orr.w	r3, r3, #2
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	e7e3      	b.n	80052c8 <__smakebuf_r+0xc>
 8005300:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <__smakebuf_r+0x7c>)
 8005302:	62b3      	str	r3, [r6, #40]	; 0x28
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	6020      	str	r0, [r4, #0]
 8005308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	9b00      	ldr	r3, [sp, #0]
 8005310:	6163      	str	r3, [r4, #20]
 8005312:	9b01      	ldr	r3, [sp, #4]
 8005314:	6120      	str	r0, [r4, #16]
 8005316:	b15b      	cbz	r3, 8005330 <__smakebuf_r+0x74>
 8005318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800531c:	4630      	mov	r0, r6
 800531e:	f000 fb7f 	bl	8005a20 <_isatty_r>
 8005322:	b128      	cbz	r0, 8005330 <__smakebuf_r+0x74>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	89a0      	ldrh	r0, [r4, #12]
 8005332:	4305      	orrs	r5, r0
 8005334:	81a5      	strh	r5, [r4, #12]
 8005336:	e7cd      	b.n	80052d4 <__smakebuf_r+0x18>
 8005338:	080050c9 	.word	0x080050c9

0800533c <__malloc_lock>:
 800533c:	4801      	ldr	r0, [pc, #4]	; (8005344 <__malloc_lock+0x8>)
 800533e:	f7ff bf95 	b.w	800526c <__retarget_lock_acquire_recursive>
 8005342:	bf00      	nop
 8005344:	200001a0 	.word	0x200001a0

08005348 <__malloc_unlock>:
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <__malloc_unlock+0x8>)
 800534a:	f7ff bf90 	b.w	800526e <__retarget_lock_release_recursive>
 800534e:	bf00      	nop
 8005350:	200001a0 	.word	0x200001a0

08005354 <__sfputc_r>:
 8005354:	6893      	ldr	r3, [r2, #8]
 8005356:	3b01      	subs	r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	b410      	push	{r4}
 800535c:	6093      	str	r3, [r2, #8]
 800535e:	da08      	bge.n	8005372 <__sfputc_r+0x1e>
 8005360:	6994      	ldr	r4, [r2, #24]
 8005362:	42a3      	cmp	r3, r4
 8005364:	db01      	blt.n	800536a <__sfputc_r+0x16>
 8005366:	290a      	cmp	r1, #10
 8005368:	d103      	bne.n	8005372 <__sfputc_r+0x1e>
 800536a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800536e:	f7ff bd05 	b.w	8004d7c <__swbuf_r>
 8005372:	6813      	ldr	r3, [r2, #0]
 8005374:	1c58      	adds	r0, r3, #1
 8005376:	6010      	str	r0, [r2, #0]
 8005378:	7019      	strb	r1, [r3, #0]
 800537a:	4608      	mov	r0, r1
 800537c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005380:	4770      	bx	lr

08005382 <__sfputs_r>:
 8005382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005384:	4606      	mov	r6, r0
 8005386:	460f      	mov	r7, r1
 8005388:	4614      	mov	r4, r2
 800538a:	18d5      	adds	r5, r2, r3
 800538c:	42ac      	cmp	r4, r5
 800538e:	d101      	bne.n	8005394 <__sfputs_r+0x12>
 8005390:	2000      	movs	r0, #0
 8005392:	e007      	b.n	80053a4 <__sfputs_r+0x22>
 8005394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005398:	463a      	mov	r2, r7
 800539a:	4630      	mov	r0, r6
 800539c:	f7ff ffda 	bl	8005354 <__sfputc_r>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d1f3      	bne.n	800538c <__sfputs_r+0xa>
 80053a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053a8 <_vfiprintf_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	460d      	mov	r5, r1
 80053ae:	b09d      	sub	sp, #116	; 0x74
 80053b0:	4614      	mov	r4, r2
 80053b2:	4698      	mov	r8, r3
 80053b4:	4606      	mov	r6, r0
 80053b6:	b118      	cbz	r0, 80053c0 <_vfiprintf_r+0x18>
 80053b8:	6983      	ldr	r3, [r0, #24]
 80053ba:	b90b      	cbnz	r3, 80053c0 <_vfiprintf_r+0x18>
 80053bc:	f7ff feb8 	bl	8005130 <__sinit>
 80053c0:	4b89      	ldr	r3, [pc, #548]	; (80055e8 <_vfiprintf_r+0x240>)
 80053c2:	429d      	cmp	r5, r3
 80053c4:	d11b      	bne.n	80053fe <_vfiprintf_r+0x56>
 80053c6:	6875      	ldr	r5, [r6, #4]
 80053c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053ca:	07d9      	lsls	r1, r3, #31
 80053cc:	d405      	bmi.n	80053da <_vfiprintf_r+0x32>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	059a      	lsls	r2, r3, #22
 80053d2:	d402      	bmi.n	80053da <_vfiprintf_r+0x32>
 80053d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053d6:	f7ff ff49 	bl	800526c <__retarget_lock_acquire_recursive>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	071b      	lsls	r3, r3, #28
 80053de:	d501      	bpl.n	80053e4 <_vfiprintf_r+0x3c>
 80053e0:	692b      	ldr	r3, [r5, #16]
 80053e2:	b9eb      	cbnz	r3, 8005420 <_vfiprintf_r+0x78>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4630      	mov	r0, r6
 80053e8:	f7ff fd1a 	bl	8004e20 <__swsetup_r>
 80053ec:	b1c0      	cbz	r0, 8005420 <_vfiprintf_r+0x78>
 80053ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053f0:	07dc      	lsls	r4, r3, #31
 80053f2:	d50e      	bpl.n	8005412 <_vfiprintf_r+0x6a>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	b01d      	add	sp, #116	; 0x74
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	4b7b      	ldr	r3, [pc, #492]	; (80055ec <_vfiprintf_r+0x244>)
 8005400:	429d      	cmp	r5, r3
 8005402:	d101      	bne.n	8005408 <_vfiprintf_r+0x60>
 8005404:	68b5      	ldr	r5, [r6, #8]
 8005406:	e7df      	b.n	80053c8 <_vfiprintf_r+0x20>
 8005408:	4b79      	ldr	r3, [pc, #484]	; (80055f0 <_vfiprintf_r+0x248>)
 800540a:	429d      	cmp	r5, r3
 800540c:	bf08      	it	eq
 800540e:	68f5      	ldreq	r5, [r6, #12]
 8005410:	e7da      	b.n	80053c8 <_vfiprintf_r+0x20>
 8005412:	89ab      	ldrh	r3, [r5, #12]
 8005414:	0598      	lsls	r0, r3, #22
 8005416:	d4ed      	bmi.n	80053f4 <_vfiprintf_r+0x4c>
 8005418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800541a:	f7ff ff28 	bl	800526e <__retarget_lock_release_recursive>
 800541e:	e7e9      	b.n	80053f4 <_vfiprintf_r+0x4c>
 8005420:	2300      	movs	r3, #0
 8005422:	9309      	str	r3, [sp, #36]	; 0x24
 8005424:	2320      	movs	r3, #32
 8005426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800542a:	f8cd 800c 	str.w	r8, [sp, #12]
 800542e:	2330      	movs	r3, #48	; 0x30
 8005430:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055f4 <_vfiprintf_r+0x24c>
 8005434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005438:	f04f 0901 	mov.w	r9, #1
 800543c:	4623      	mov	r3, r4
 800543e:	469a      	mov	sl, r3
 8005440:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005444:	b10a      	cbz	r2, 800544a <_vfiprintf_r+0xa2>
 8005446:	2a25      	cmp	r2, #37	; 0x25
 8005448:	d1f9      	bne.n	800543e <_vfiprintf_r+0x96>
 800544a:	ebba 0b04 	subs.w	fp, sl, r4
 800544e:	d00b      	beq.n	8005468 <_vfiprintf_r+0xc0>
 8005450:	465b      	mov	r3, fp
 8005452:	4622      	mov	r2, r4
 8005454:	4629      	mov	r1, r5
 8005456:	4630      	mov	r0, r6
 8005458:	f7ff ff93 	bl	8005382 <__sfputs_r>
 800545c:	3001      	adds	r0, #1
 800545e:	f000 80aa 	beq.w	80055b6 <_vfiprintf_r+0x20e>
 8005462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005464:	445a      	add	r2, fp
 8005466:	9209      	str	r2, [sp, #36]	; 0x24
 8005468:	f89a 3000 	ldrb.w	r3, [sl]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80a2 	beq.w	80055b6 <_vfiprintf_r+0x20e>
 8005472:	2300      	movs	r3, #0
 8005474:	f04f 32ff 	mov.w	r2, #4294967295
 8005478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800547c:	f10a 0a01 	add.w	sl, sl, #1
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	9307      	str	r3, [sp, #28]
 8005484:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005488:	931a      	str	r3, [sp, #104]	; 0x68
 800548a:	4654      	mov	r4, sl
 800548c:	2205      	movs	r2, #5
 800548e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005492:	4858      	ldr	r0, [pc, #352]	; (80055f4 <_vfiprintf_r+0x24c>)
 8005494:	f7fa febc 	bl	8000210 <memchr>
 8005498:	9a04      	ldr	r2, [sp, #16]
 800549a:	b9d8      	cbnz	r0, 80054d4 <_vfiprintf_r+0x12c>
 800549c:	06d1      	lsls	r1, r2, #27
 800549e:	bf44      	itt	mi
 80054a0:	2320      	movmi	r3, #32
 80054a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a6:	0713      	lsls	r3, r2, #28
 80054a8:	bf44      	itt	mi
 80054aa:	232b      	movmi	r3, #43	; 0x2b
 80054ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054b0:	f89a 3000 	ldrb.w	r3, [sl]
 80054b4:	2b2a      	cmp	r3, #42	; 0x2a
 80054b6:	d015      	beq.n	80054e4 <_vfiprintf_r+0x13c>
 80054b8:	9a07      	ldr	r2, [sp, #28]
 80054ba:	4654      	mov	r4, sl
 80054bc:	2000      	movs	r0, #0
 80054be:	f04f 0c0a 	mov.w	ip, #10
 80054c2:	4621      	mov	r1, r4
 80054c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054c8:	3b30      	subs	r3, #48	; 0x30
 80054ca:	2b09      	cmp	r3, #9
 80054cc:	d94e      	bls.n	800556c <_vfiprintf_r+0x1c4>
 80054ce:	b1b0      	cbz	r0, 80054fe <_vfiprintf_r+0x156>
 80054d0:	9207      	str	r2, [sp, #28]
 80054d2:	e014      	b.n	80054fe <_vfiprintf_r+0x156>
 80054d4:	eba0 0308 	sub.w	r3, r0, r8
 80054d8:	fa09 f303 	lsl.w	r3, r9, r3
 80054dc:	4313      	orrs	r3, r2
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	46a2      	mov	sl, r4
 80054e2:	e7d2      	b.n	800548a <_vfiprintf_r+0xe2>
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	1d19      	adds	r1, r3, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	9103      	str	r1, [sp, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bfbb      	ittet	lt
 80054f0:	425b      	neglt	r3, r3
 80054f2:	f042 0202 	orrlt.w	r2, r2, #2
 80054f6:	9307      	strge	r3, [sp, #28]
 80054f8:	9307      	strlt	r3, [sp, #28]
 80054fa:	bfb8      	it	lt
 80054fc:	9204      	strlt	r2, [sp, #16]
 80054fe:	7823      	ldrb	r3, [r4, #0]
 8005500:	2b2e      	cmp	r3, #46	; 0x2e
 8005502:	d10c      	bne.n	800551e <_vfiprintf_r+0x176>
 8005504:	7863      	ldrb	r3, [r4, #1]
 8005506:	2b2a      	cmp	r3, #42	; 0x2a
 8005508:	d135      	bne.n	8005576 <_vfiprintf_r+0x1ce>
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	1d1a      	adds	r2, r3, #4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	9203      	str	r2, [sp, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	bfb8      	it	lt
 8005516:	f04f 33ff 	movlt.w	r3, #4294967295
 800551a:	3402      	adds	r4, #2
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005604 <_vfiprintf_r+0x25c>
 8005522:	7821      	ldrb	r1, [r4, #0]
 8005524:	2203      	movs	r2, #3
 8005526:	4650      	mov	r0, sl
 8005528:	f7fa fe72 	bl	8000210 <memchr>
 800552c:	b140      	cbz	r0, 8005540 <_vfiprintf_r+0x198>
 800552e:	2340      	movs	r3, #64	; 0x40
 8005530:	eba0 000a 	sub.w	r0, r0, sl
 8005534:	fa03 f000 	lsl.w	r0, r3, r0
 8005538:	9b04      	ldr	r3, [sp, #16]
 800553a:	4303      	orrs	r3, r0
 800553c:	3401      	adds	r4, #1
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005544:	482c      	ldr	r0, [pc, #176]	; (80055f8 <_vfiprintf_r+0x250>)
 8005546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800554a:	2206      	movs	r2, #6
 800554c:	f7fa fe60 	bl	8000210 <memchr>
 8005550:	2800      	cmp	r0, #0
 8005552:	d03f      	beq.n	80055d4 <_vfiprintf_r+0x22c>
 8005554:	4b29      	ldr	r3, [pc, #164]	; (80055fc <_vfiprintf_r+0x254>)
 8005556:	bb1b      	cbnz	r3, 80055a0 <_vfiprintf_r+0x1f8>
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	3307      	adds	r3, #7
 800555c:	f023 0307 	bic.w	r3, r3, #7
 8005560:	3308      	adds	r3, #8
 8005562:	9303      	str	r3, [sp, #12]
 8005564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005566:	443b      	add	r3, r7
 8005568:	9309      	str	r3, [sp, #36]	; 0x24
 800556a:	e767      	b.n	800543c <_vfiprintf_r+0x94>
 800556c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005570:	460c      	mov	r4, r1
 8005572:	2001      	movs	r0, #1
 8005574:	e7a5      	b.n	80054c2 <_vfiprintf_r+0x11a>
 8005576:	2300      	movs	r3, #0
 8005578:	3401      	adds	r4, #1
 800557a:	9305      	str	r3, [sp, #20]
 800557c:	4619      	mov	r1, r3
 800557e:	f04f 0c0a 	mov.w	ip, #10
 8005582:	4620      	mov	r0, r4
 8005584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005588:	3a30      	subs	r2, #48	; 0x30
 800558a:	2a09      	cmp	r2, #9
 800558c:	d903      	bls.n	8005596 <_vfiprintf_r+0x1ee>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0c5      	beq.n	800551e <_vfiprintf_r+0x176>
 8005592:	9105      	str	r1, [sp, #20]
 8005594:	e7c3      	b.n	800551e <_vfiprintf_r+0x176>
 8005596:	fb0c 2101 	mla	r1, ip, r1, r2
 800559a:	4604      	mov	r4, r0
 800559c:	2301      	movs	r3, #1
 800559e:	e7f0      	b.n	8005582 <_vfiprintf_r+0x1da>
 80055a0:	ab03      	add	r3, sp, #12
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	462a      	mov	r2, r5
 80055a6:	4b16      	ldr	r3, [pc, #88]	; (8005600 <_vfiprintf_r+0x258>)
 80055a8:	a904      	add	r1, sp, #16
 80055aa:	4630      	mov	r0, r6
 80055ac:	f3af 8000 	nop.w
 80055b0:	4607      	mov	r7, r0
 80055b2:	1c78      	adds	r0, r7, #1
 80055b4:	d1d6      	bne.n	8005564 <_vfiprintf_r+0x1bc>
 80055b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055b8:	07d9      	lsls	r1, r3, #31
 80055ba:	d405      	bmi.n	80055c8 <_vfiprintf_r+0x220>
 80055bc:	89ab      	ldrh	r3, [r5, #12]
 80055be:	059a      	lsls	r2, r3, #22
 80055c0:	d402      	bmi.n	80055c8 <_vfiprintf_r+0x220>
 80055c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055c4:	f7ff fe53 	bl	800526e <__retarget_lock_release_recursive>
 80055c8:	89ab      	ldrh	r3, [r5, #12]
 80055ca:	065b      	lsls	r3, r3, #25
 80055cc:	f53f af12 	bmi.w	80053f4 <_vfiprintf_r+0x4c>
 80055d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055d2:	e711      	b.n	80053f8 <_vfiprintf_r+0x50>
 80055d4:	ab03      	add	r3, sp, #12
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	462a      	mov	r2, r5
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <_vfiprintf_r+0x258>)
 80055dc:	a904      	add	r1, sp, #16
 80055de:	4630      	mov	r0, r6
 80055e0:	f000 f880 	bl	80056e4 <_printf_i>
 80055e4:	e7e4      	b.n	80055b0 <_vfiprintf_r+0x208>
 80055e6:	bf00      	nop
 80055e8:	08005d18 	.word	0x08005d18
 80055ec:	08005d38 	.word	0x08005d38
 80055f0:	08005cf8 	.word	0x08005cf8
 80055f4:	08005d58 	.word	0x08005d58
 80055f8:	08005d62 	.word	0x08005d62
 80055fc:	00000000 	.word	0x00000000
 8005600:	08005383 	.word	0x08005383
 8005604:	08005d5e 	.word	0x08005d5e

08005608 <_printf_common>:
 8005608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	4616      	mov	r6, r2
 800560e:	4699      	mov	r9, r3
 8005610:	688a      	ldr	r2, [r1, #8]
 8005612:	690b      	ldr	r3, [r1, #16]
 8005614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005618:	4293      	cmp	r3, r2
 800561a:	bfb8      	it	lt
 800561c:	4613      	movlt	r3, r2
 800561e:	6033      	str	r3, [r6, #0]
 8005620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005624:	4607      	mov	r7, r0
 8005626:	460c      	mov	r4, r1
 8005628:	b10a      	cbz	r2, 800562e <_printf_common+0x26>
 800562a:	3301      	adds	r3, #1
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	0699      	lsls	r1, r3, #26
 8005632:	bf42      	ittt	mi
 8005634:	6833      	ldrmi	r3, [r6, #0]
 8005636:	3302      	addmi	r3, #2
 8005638:	6033      	strmi	r3, [r6, #0]
 800563a:	6825      	ldr	r5, [r4, #0]
 800563c:	f015 0506 	ands.w	r5, r5, #6
 8005640:	d106      	bne.n	8005650 <_printf_common+0x48>
 8005642:	f104 0a19 	add.w	sl, r4, #25
 8005646:	68e3      	ldr	r3, [r4, #12]
 8005648:	6832      	ldr	r2, [r6, #0]
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	42ab      	cmp	r3, r5
 800564e:	dc26      	bgt.n	800569e <_printf_common+0x96>
 8005650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005654:	1e13      	subs	r3, r2, #0
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	bf18      	it	ne
 800565a:	2301      	movne	r3, #1
 800565c:	0692      	lsls	r2, r2, #26
 800565e:	d42b      	bmi.n	80056b8 <_printf_common+0xb0>
 8005660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005664:	4649      	mov	r1, r9
 8005666:	4638      	mov	r0, r7
 8005668:	47c0      	blx	r8
 800566a:	3001      	adds	r0, #1
 800566c:	d01e      	beq.n	80056ac <_printf_common+0xa4>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	68e5      	ldr	r5, [r4, #12]
 8005672:	6832      	ldr	r2, [r6, #0]
 8005674:	f003 0306 	and.w	r3, r3, #6
 8005678:	2b04      	cmp	r3, #4
 800567a:	bf08      	it	eq
 800567c:	1aad      	subeq	r5, r5, r2
 800567e:	68a3      	ldr	r3, [r4, #8]
 8005680:	6922      	ldr	r2, [r4, #16]
 8005682:	bf0c      	ite	eq
 8005684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005688:	2500      	movne	r5, #0
 800568a:	4293      	cmp	r3, r2
 800568c:	bfc4      	itt	gt
 800568e:	1a9b      	subgt	r3, r3, r2
 8005690:	18ed      	addgt	r5, r5, r3
 8005692:	2600      	movs	r6, #0
 8005694:	341a      	adds	r4, #26
 8005696:	42b5      	cmp	r5, r6
 8005698:	d11a      	bne.n	80056d0 <_printf_common+0xc8>
 800569a:	2000      	movs	r0, #0
 800569c:	e008      	b.n	80056b0 <_printf_common+0xa8>
 800569e:	2301      	movs	r3, #1
 80056a0:	4652      	mov	r2, sl
 80056a2:	4649      	mov	r1, r9
 80056a4:	4638      	mov	r0, r7
 80056a6:	47c0      	blx	r8
 80056a8:	3001      	adds	r0, #1
 80056aa:	d103      	bne.n	80056b4 <_printf_common+0xac>
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b4:	3501      	adds	r5, #1
 80056b6:	e7c6      	b.n	8005646 <_printf_common+0x3e>
 80056b8:	18e1      	adds	r1, r4, r3
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	2030      	movs	r0, #48	; 0x30
 80056be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056c2:	4422      	add	r2, r4
 80056c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056cc:	3302      	adds	r3, #2
 80056ce:	e7c7      	b.n	8005660 <_printf_common+0x58>
 80056d0:	2301      	movs	r3, #1
 80056d2:	4622      	mov	r2, r4
 80056d4:	4649      	mov	r1, r9
 80056d6:	4638      	mov	r0, r7
 80056d8:	47c0      	blx	r8
 80056da:	3001      	adds	r0, #1
 80056dc:	d0e6      	beq.n	80056ac <_printf_common+0xa4>
 80056de:	3601      	adds	r6, #1
 80056e0:	e7d9      	b.n	8005696 <_printf_common+0x8e>
	...

080056e4 <_printf_i>:
 80056e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e8:	7e0f      	ldrb	r7, [r1, #24]
 80056ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056ec:	2f78      	cmp	r7, #120	; 0x78
 80056ee:	4691      	mov	r9, r2
 80056f0:	4680      	mov	r8, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	469a      	mov	sl, r3
 80056f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056fa:	d807      	bhi.n	800570c <_printf_i+0x28>
 80056fc:	2f62      	cmp	r7, #98	; 0x62
 80056fe:	d80a      	bhi.n	8005716 <_printf_i+0x32>
 8005700:	2f00      	cmp	r7, #0
 8005702:	f000 80d8 	beq.w	80058b6 <_printf_i+0x1d2>
 8005706:	2f58      	cmp	r7, #88	; 0x58
 8005708:	f000 80a3 	beq.w	8005852 <_printf_i+0x16e>
 800570c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005714:	e03a      	b.n	800578c <_printf_i+0xa8>
 8005716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800571a:	2b15      	cmp	r3, #21
 800571c:	d8f6      	bhi.n	800570c <_printf_i+0x28>
 800571e:	a101      	add	r1, pc, #4	; (adr r1, 8005724 <_printf_i+0x40>)
 8005720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005724:	0800577d 	.word	0x0800577d
 8005728:	08005791 	.word	0x08005791
 800572c:	0800570d 	.word	0x0800570d
 8005730:	0800570d 	.word	0x0800570d
 8005734:	0800570d 	.word	0x0800570d
 8005738:	0800570d 	.word	0x0800570d
 800573c:	08005791 	.word	0x08005791
 8005740:	0800570d 	.word	0x0800570d
 8005744:	0800570d 	.word	0x0800570d
 8005748:	0800570d 	.word	0x0800570d
 800574c:	0800570d 	.word	0x0800570d
 8005750:	0800589d 	.word	0x0800589d
 8005754:	080057c1 	.word	0x080057c1
 8005758:	0800587f 	.word	0x0800587f
 800575c:	0800570d 	.word	0x0800570d
 8005760:	0800570d 	.word	0x0800570d
 8005764:	080058bf 	.word	0x080058bf
 8005768:	0800570d 	.word	0x0800570d
 800576c:	080057c1 	.word	0x080057c1
 8005770:	0800570d 	.word	0x0800570d
 8005774:	0800570d 	.word	0x0800570d
 8005778:	08005887 	.word	0x08005887
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	1d1a      	adds	r2, r3, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	602a      	str	r2, [r5, #0]
 8005784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800578c:	2301      	movs	r3, #1
 800578e:	e0a3      	b.n	80058d8 <_printf_i+0x1f4>
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	6829      	ldr	r1, [r5, #0]
 8005794:	0606      	lsls	r6, r0, #24
 8005796:	f101 0304 	add.w	r3, r1, #4
 800579a:	d50a      	bpl.n	80057b2 <_printf_i+0xce>
 800579c:	680e      	ldr	r6, [r1, #0]
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	2e00      	cmp	r6, #0
 80057a2:	da03      	bge.n	80057ac <_printf_i+0xc8>
 80057a4:	232d      	movs	r3, #45	; 0x2d
 80057a6:	4276      	negs	r6, r6
 80057a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ac:	485e      	ldr	r0, [pc, #376]	; (8005928 <_printf_i+0x244>)
 80057ae:	230a      	movs	r3, #10
 80057b0:	e019      	b.n	80057e6 <_printf_i+0x102>
 80057b2:	680e      	ldr	r6, [r1, #0]
 80057b4:	602b      	str	r3, [r5, #0]
 80057b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057ba:	bf18      	it	ne
 80057bc:	b236      	sxthne	r6, r6
 80057be:	e7ef      	b.n	80057a0 <_printf_i+0xbc>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	6820      	ldr	r0, [r4, #0]
 80057c4:	1d19      	adds	r1, r3, #4
 80057c6:	6029      	str	r1, [r5, #0]
 80057c8:	0601      	lsls	r1, r0, #24
 80057ca:	d501      	bpl.n	80057d0 <_printf_i+0xec>
 80057cc:	681e      	ldr	r6, [r3, #0]
 80057ce:	e002      	b.n	80057d6 <_printf_i+0xf2>
 80057d0:	0646      	lsls	r6, r0, #25
 80057d2:	d5fb      	bpl.n	80057cc <_printf_i+0xe8>
 80057d4:	881e      	ldrh	r6, [r3, #0]
 80057d6:	4854      	ldr	r0, [pc, #336]	; (8005928 <_printf_i+0x244>)
 80057d8:	2f6f      	cmp	r7, #111	; 0x6f
 80057da:	bf0c      	ite	eq
 80057dc:	2308      	moveq	r3, #8
 80057de:	230a      	movne	r3, #10
 80057e0:	2100      	movs	r1, #0
 80057e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057e6:	6865      	ldr	r5, [r4, #4]
 80057e8:	60a5      	str	r5, [r4, #8]
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	bfa2      	ittt	ge
 80057ee:	6821      	ldrge	r1, [r4, #0]
 80057f0:	f021 0104 	bicge.w	r1, r1, #4
 80057f4:	6021      	strge	r1, [r4, #0]
 80057f6:	b90e      	cbnz	r6, 80057fc <_printf_i+0x118>
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	d04d      	beq.n	8005898 <_printf_i+0x1b4>
 80057fc:	4615      	mov	r5, r2
 80057fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005802:	fb03 6711 	mls	r7, r3, r1, r6
 8005806:	5dc7      	ldrb	r7, [r0, r7]
 8005808:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800580c:	4637      	mov	r7, r6
 800580e:	42bb      	cmp	r3, r7
 8005810:	460e      	mov	r6, r1
 8005812:	d9f4      	bls.n	80057fe <_printf_i+0x11a>
 8005814:	2b08      	cmp	r3, #8
 8005816:	d10b      	bne.n	8005830 <_printf_i+0x14c>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	07de      	lsls	r6, r3, #31
 800581c:	d508      	bpl.n	8005830 <_printf_i+0x14c>
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	6861      	ldr	r1, [r4, #4]
 8005822:	4299      	cmp	r1, r3
 8005824:	bfde      	ittt	le
 8005826:	2330      	movle	r3, #48	; 0x30
 8005828:	f805 3c01 	strble.w	r3, [r5, #-1]
 800582c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005830:	1b52      	subs	r2, r2, r5
 8005832:	6122      	str	r2, [r4, #16]
 8005834:	f8cd a000 	str.w	sl, [sp]
 8005838:	464b      	mov	r3, r9
 800583a:	aa03      	add	r2, sp, #12
 800583c:	4621      	mov	r1, r4
 800583e:	4640      	mov	r0, r8
 8005840:	f7ff fee2 	bl	8005608 <_printf_common>
 8005844:	3001      	adds	r0, #1
 8005846:	d14c      	bne.n	80058e2 <_printf_i+0x1fe>
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	b004      	add	sp, #16
 800584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005852:	4835      	ldr	r0, [pc, #212]	; (8005928 <_printf_i+0x244>)
 8005854:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005858:	6829      	ldr	r1, [r5, #0]
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005860:	6029      	str	r1, [r5, #0]
 8005862:	061d      	lsls	r5, r3, #24
 8005864:	d514      	bpl.n	8005890 <_printf_i+0x1ac>
 8005866:	07df      	lsls	r7, r3, #31
 8005868:	bf44      	itt	mi
 800586a:	f043 0320 	orrmi.w	r3, r3, #32
 800586e:	6023      	strmi	r3, [r4, #0]
 8005870:	b91e      	cbnz	r6, 800587a <_printf_i+0x196>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	f023 0320 	bic.w	r3, r3, #32
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	2310      	movs	r3, #16
 800587c:	e7b0      	b.n	80057e0 <_printf_i+0xfc>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	f043 0320 	orr.w	r3, r3, #32
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	2378      	movs	r3, #120	; 0x78
 8005888:	4828      	ldr	r0, [pc, #160]	; (800592c <_printf_i+0x248>)
 800588a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800588e:	e7e3      	b.n	8005858 <_printf_i+0x174>
 8005890:	0659      	lsls	r1, r3, #25
 8005892:	bf48      	it	mi
 8005894:	b2b6      	uxthmi	r6, r6
 8005896:	e7e6      	b.n	8005866 <_printf_i+0x182>
 8005898:	4615      	mov	r5, r2
 800589a:	e7bb      	b.n	8005814 <_printf_i+0x130>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	6826      	ldr	r6, [r4, #0]
 80058a0:	6961      	ldr	r1, [r4, #20]
 80058a2:	1d18      	adds	r0, r3, #4
 80058a4:	6028      	str	r0, [r5, #0]
 80058a6:	0635      	lsls	r5, r6, #24
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	d501      	bpl.n	80058b0 <_printf_i+0x1cc>
 80058ac:	6019      	str	r1, [r3, #0]
 80058ae:	e002      	b.n	80058b6 <_printf_i+0x1d2>
 80058b0:	0670      	lsls	r0, r6, #25
 80058b2:	d5fb      	bpl.n	80058ac <_printf_i+0x1c8>
 80058b4:	8019      	strh	r1, [r3, #0]
 80058b6:	2300      	movs	r3, #0
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	4615      	mov	r5, r2
 80058bc:	e7ba      	b.n	8005834 <_printf_i+0x150>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	1d1a      	adds	r2, r3, #4
 80058c2:	602a      	str	r2, [r5, #0]
 80058c4:	681d      	ldr	r5, [r3, #0]
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	2100      	movs	r1, #0
 80058ca:	4628      	mov	r0, r5
 80058cc:	f7fa fca0 	bl	8000210 <memchr>
 80058d0:	b108      	cbz	r0, 80058d6 <_printf_i+0x1f2>
 80058d2:	1b40      	subs	r0, r0, r5
 80058d4:	6060      	str	r0, [r4, #4]
 80058d6:	6863      	ldr	r3, [r4, #4]
 80058d8:	6123      	str	r3, [r4, #16]
 80058da:	2300      	movs	r3, #0
 80058dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e0:	e7a8      	b.n	8005834 <_printf_i+0x150>
 80058e2:	6923      	ldr	r3, [r4, #16]
 80058e4:	462a      	mov	r2, r5
 80058e6:	4649      	mov	r1, r9
 80058e8:	4640      	mov	r0, r8
 80058ea:	47d0      	blx	sl
 80058ec:	3001      	adds	r0, #1
 80058ee:	d0ab      	beq.n	8005848 <_printf_i+0x164>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	079b      	lsls	r3, r3, #30
 80058f4:	d413      	bmi.n	800591e <_printf_i+0x23a>
 80058f6:	68e0      	ldr	r0, [r4, #12]
 80058f8:	9b03      	ldr	r3, [sp, #12]
 80058fa:	4298      	cmp	r0, r3
 80058fc:	bfb8      	it	lt
 80058fe:	4618      	movlt	r0, r3
 8005900:	e7a4      	b.n	800584c <_printf_i+0x168>
 8005902:	2301      	movs	r3, #1
 8005904:	4632      	mov	r2, r6
 8005906:	4649      	mov	r1, r9
 8005908:	4640      	mov	r0, r8
 800590a:	47d0      	blx	sl
 800590c:	3001      	adds	r0, #1
 800590e:	d09b      	beq.n	8005848 <_printf_i+0x164>
 8005910:	3501      	adds	r5, #1
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	9903      	ldr	r1, [sp, #12]
 8005916:	1a5b      	subs	r3, r3, r1
 8005918:	42ab      	cmp	r3, r5
 800591a:	dcf2      	bgt.n	8005902 <_printf_i+0x21e>
 800591c:	e7eb      	b.n	80058f6 <_printf_i+0x212>
 800591e:	2500      	movs	r5, #0
 8005920:	f104 0619 	add.w	r6, r4, #25
 8005924:	e7f5      	b.n	8005912 <_printf_i+0x22e>
 8005926:	bf00      	nop
 8005928:	08005d69 	.word	0x08005d69
 800592c:	08005d7a 	.word	0x08005d7a

08005930 <__sread>:
 8005930:	b510      	push	{r4, lr}
 8005932:	460c      	mov	r4, r1
 8005934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005938:	f000 f894 	bl	8005a64 <_read_r>
 800593c:	2800      	cmp	r0, #0
 800593e:	bfab      	itete	ge
 8005940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005942:	89a3      	ldrhlt	r3, [r4, #12]
 8005944:	181b      	addge	r3, r3, r0
 8005946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800594a:	bfac      	ite	ge
 800594c:	6563      	strge	r3, [r4, #84]	; 0x54
 800594e:	81a3      	strhlt	r3, [r4, #12]
 8005950:	bd10      	pop	{r4, pc}

08005952 <__swrite>:
 8005952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005956:	461f      	mov	r7, r3
 8005958:	898b      	ldrh	r3, [r1, #12]
 800595a:	05db      	lsls	r3, r3, #23
 800595c:	4605      	mov	r5, r0
 800595e:	460c      	mov	r4, r1
 8005960:	4616      	mov	r6, r2
 8005962:	d505      	bpl.n	8005970 <__swrite+0x1e>
 8005964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005968:	2302      	movs	r3, #2
 800596a:	2200      	movs	r2, #0
 800596c:	f000 f868 	bl	8005a40 <_lseek_r>
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	4632      	mov	r2, r6
 800597e:	463b      	mov	r3, r7
 8005980:	4628      	mov	r0, r5
 8005982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	f000 b817 	b.w	80059b8 <_write_r>

0800598a <__sseek>:
 800598a:	b510      	push	{r4, lr}
 800598c:	460c      	mov	r4, r1
 800598e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005992:	f000 f855 	bl	8005a40 <_lseek_r>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	bf15      	itete	ne
 800599c:	6560      	strne	r0, [r4, #84]	; 0x54
 800599e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059a6:	81a3      	strheq	r3, [r4, #12]
 80059a8:	bf18      	it	ne
 80059aa:	81a3      	strhne	r3, [r4, #12]
 80059ac:	bd10      	pop	{r4, pc}

080059ae <__sclose>:
 80059ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b2:	f000 b813 	b.w	80059dc <_close_r>
	...

080059b8 <_write_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d07      	ldr	r5, [pc, #28]	; (80059d8 <_write_r+0x20>)
 80059bc:	4604      	mov	r4, r0
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	602a      	str	r2, [r5, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f7fb fb41 	bl	800104e <_write>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_write_r+0x1e>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_write_r+0x1e>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	200001a4 	.word	0x200001a4

080059dc <_close_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d06      	ldr	r5, [pc, #24]	; (80059f8 <_close_r+0x1c>)
 80059e0:	2300      	movs	r3, #0
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	f7fb fb4d 	bl	8001086 <_close>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_close_r+0x1a>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_close_r+0x1a>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	200001a4 	.word	0x200001a4

080059fc <_fstat_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d07      	ldr	r5, [pc, #28]	; (8005a1c <_fstat_r+0x20>)
 8005a00:	2300      	movs	r3, #0
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	f7fb fb48 	bl	800109e <_fstat>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	d102      	bne.n	8005a18 <_fstat_r+0x1c>
 8005a12:	682b      	ldr	r3, [r5, #0]
 8005a14:	b103      	cbz	r3, 8005a18 <_fstat_r+0x1c>
 8005a16:	6023      	str	r3, [r4, #0]
 8005a18:	bd38      	pop	{r3, r4, r5, pc}
 8005a1a:	bf00      	nop
 8005a1c:	200001a4 	.word	0x200001a4

08005a20 <_isatty_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d06      	ldr	r5, [pc, #24]	; (8005a3c <_isatty_r+0x1c>)
 8005a24:	2300      	movs	r3, #0
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	f7fb fb47 	bl	80010be <_isatty>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_isatty_r+0x1a>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_isatty_r+0x1a>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	200001a4 	.word	0x200001a4

08005a40 <_lseek_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d07      	ldr	r5, [pc, #28]	; (8005a60 <_lseek_r+0x20>)
 8005a44:	4604      	mov	r4, r0
 8005a46:	4608      	mov	r0, r1
 8005a48:	4611      	mov	r1, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	602a      	str	r2, [r5, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f7fb fb40 	bl	80010d4 <_lseek>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_lseek_r+0x1e>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_lseek_r+0x1e>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	200001a4 	.word	0x200001a4

08005a64 <_read_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d07      	ldr	r5, [pc, #28]	; (8005a84 <_read_r+0x20>)
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4608      	mov	r0, r1
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	602a      	str	r2, [r5, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f7fb face 	bl	8001014 <_read>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_read_r+0x1e>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_read_r+0x1e>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	200001a4 	.word	0x200001a4

08005a88 <_init>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr

08005a94 <_fini>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr
